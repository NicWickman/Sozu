{
	"schemaVersion": "2.0.0",
	"contractName": "LinkTokenReceiver",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [],
				"name": "getChainlinkToken",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "onTokenTransfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"onTokenTransfer(address,uint256,bytes)": {
					"details": "The data payload's first 2 words will be overwritten by the `sender` and `amount` values to ensure correctness. Calls oracleRequest.",
					"params": {
						"amount": "Amount of LINK sent (specified in wei)",
						"data": "Payload of the transaction",
						"sender": "Address of the sender"
					}
				}
			},
			"version": 1
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x",
				"opcodes": "",
				"sourceMap": ""
			},
			"deployedBytecode": {
				"immutableReferences": {},
				"linkReferences": {},
				"object": "0x",
				"opcodes": "",
				"sourceMap": ""
			},
			"methodIdentifiers": {
				"getChainlinkToken()": "165d35e1",
				"onTokenTransfer(address,uint256,bytes)": "a4c0ed36"
			}
		},
		"metadata": "{\"compiler\":{\"version\":\"0.7.0+commit.9e61f92b\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getChainlinkToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onTokenTransfer(address,uint256,bytes)\":{\"details\":\"The data payload's first 2 words will be overwritten by the `sender` and `amount` values to ensure correctness. Calls oracleRequest.\",\"params\":{\"amount\":\"Amount of LINK sent (specified in wei)\",\"data\":\"Payload of the transaction\",\"sender\":\"Address of the sender\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onTokenTransfer(address,uint256,bytes)\":{\"notice\":\"Called when LINK is sent to the contract via `transferAndCall`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/LinkTokenReceiver.sol\":\"LinkTokenReceiver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/LinkTokenReceiver.sol\":{\"keccak256\":\"0xe883329062998f523df8cc7b4fe9205d431a3268c3d0e0fbeb61f03ab78f350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b30993f2ae7f00ce138fb586d04dbc284fe60f9bafe631adde114e4f0b1dfdb2\",\"dweb:/ipfs/QmYYGq4Host5219w6BuLjYLqaRZJqcQNi8f7YRVsDLVKWn\"]}},\"version\":1}",
		"userdoc": {
			"kind": "user",
			"methods": {
				"onTokenTransfer(address,uint256,bytes)": {
					"notice": "Called when LINK is sent to the contract via `transferAndCall`"
				}
			},
			"version": 1
		}
	},
	"sources": {
		"dev/LinkTokenReceiver.sol": {
			"id": 4
		}
	},
	"sourceCodes": {
		"dev/LinkTokenReceiver.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nabstract contract LinkTokenReceiver {\n\n  bytes4 constant private ORACLE_REQUEST_SELECTOR = 0x40429946;\n  uint256 constant private SELECTOR_LENGTH = 4;\n  uint256 constant private EXPECTED_REQUEST_WORDS = 2;\n  uint256 constant private MINIMUM_REQUEST_LENGTH = SELECTOR_LENGTH + (32 * EXPECTED_REQUEST_WORDS);\n  /**\n   * @notice Called when LINK is sent to the contract via `transferAndCall`\n   * @dev The data payload's first 2 words will be overwritten by the `sender` and `amount`\n   * values to ensure correctness. Calls oracleRequest.\n   * @param sender Address of the sender\n   * @param amount Amount of LINK sent (specified in wei)\n   * @param data Payload of the transaction\n   */\n  function onTokenTransfer(\n    address sender,\n    uint256 amount,\n    bytes memory data\n  )\n    public\n    onlyLINK\n    validRequestLength(data)\n    permittedFunctionsForLINK(data)\n  {\n    assembly {\n      // solhint-disable-next-line avoid-low-level-calls\n      mstore(add(data, 36), sender) // ensure correct sender is passed\n      // solhint-disable-next-line avoid-low-level-calls\n      mstore(add(data, 68), amount)    // ensure correct amount is passed\n    }\n    // solhint-disable-next-line avoid-low-level-calls\n    (bool success, ) = address(this).delegatecall(data); // calls oracleRequest\n    require(success, \"Unable to create request\");\n  }\n\n  function getChainlinkToken() public view virtual returns (address);\n\n  /**\n   * @dev Reverts if not sent from the LINK token\n   */\n  modifier onlyLINK() {\n    require(msg.sender == getChainlinkToken(), \"Must use LINK token\");\n    _;\n  }\n\n  /**\n   * @dev Reverts if the given data does not begin with the `oracleRequest` function selector\n   * @param data The data payload of the request\n   */\n  modifier permittedFunctionsForLINK(bytes memory data) {\n    bytes4 funcSelector;\n    assembly {\n      // solhint-disable-next-line avoid-low-level-calls\n      funcSelector := mload(add(data, 32))\n    }\n    require(funcSelector == ORACLE_REQUEST_SELECTOR, \"Must use whitelisted functions\");\n    _;\n  }\n\n  /**\n   * @dev Reverts if the given payload is less than needed to create a request\n   * @param data The request payload\n   */\n  modifier validRequestLength(bytes memory data) {\n    require(data.length >= MINIMUM_REQUEST_LENGTH, \"Invalid request length\");\n    _;\n  }\n}\n"
	},
	"sourceTreeHashHex": "0xe883329062998f523df8cc7b4fe9205d431a3268c3d0e0fbeb61f03ab78f350f",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.7.0+commit.9e61f92b.js",
		"settings": {
			"optimizer": {
				"runs": 1000000,
				"enabled": true
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"userdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap",
						"evm.methodIdentifiers",
						"metadata"
					]
				}
			},
			"remappings": []
		}
	},
	"chains": {}
}
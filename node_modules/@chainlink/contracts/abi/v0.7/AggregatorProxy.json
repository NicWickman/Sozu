{
	"schemaVersion": "2.0.0",
	"contractName": "AggregatorProxy",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "aggregatorAddress",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previous",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "latest",
						"type": "address"
					}
				],
				"name": "AggregatorConfirmed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "current",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "proposed",
						"type": "address"
					}
				],
				"name": "AggregatorProposed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "int256",
						"name": "current",
						"type": "int256"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "updatedAt",
						"type": "uint256"
					}
				],
				"name": "AnswerUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "startedBy",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "startedAt",
						"type": "uint256"
					}
				],
				"name": "NewRound",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "acceptOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "aggregator",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "aggregatorAddress",
						"type": "address"
					}
				],
				"name": "confirmAggregator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "description",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					}
				],
				"name": "getAnswer",
				"outputs": [
					{
						"internalType": "int256",
						"name": "answer",
						"type": "int256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint80",
						"name": "roundId",
						"type": "uint80"
					}
				],
				"name": "getRoundData",
				"outputs": [
					{
						"internalType": "uint80",
						"name": "id",
						"type": "uint80"
					},
					{
						"internalType": "int256",
						"name": "answer",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "startedAt",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "updatedAt",
						"type": "uint256"
					},
					{
						"internalType": "uint80",
						"name": "answeredInRound",
						"type": "uint80"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					}
				],
				"name": "getTimestamp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "updatedAt",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "latestAnswer",
				"outputs": [
					{
						"internalType": "int256",
						"name": "answer",
						"type": "int256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "latestRound",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "latestRoundData",
				"outputs": [
					{
						"internalType": "uint80",
						"name": "id",
						"type": "uint80"
					},
					{
						"internalType": "int256",
						"name": "answer",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "startedAt",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "updatedAt",
						"type": "uint256"
					},
					{
						"internalType": "uint80",
						"name": "answeredInRound",
						"type": "uint80"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "latestTimestamp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "updatedAt",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "phaseId",
						"type": "uint16"
					}
				],
				"name": "phaseAggregators",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "phaseId",
				"outputs": [
					{
						"internalType": "uint16",
						"name": "",
						"type": "uint16"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "aggregatorAddress",
						"type": "address"
					}
				],
				"name": "proposeAggregator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "proposedAggregator",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint80",
						"name": "roundId",
						"type": "uint80"
					}
				],
				"name": "proposedGetRoundData",
				"outputs": [
					{
						"internalType": "uint80",
						"name": "id",
						"type": "uint80"
					},
					{
						"internalType": "int256",
						"name": "answer",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "startedAt",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "updatedAt",
						"type": "uint256"
					},
					{
						"internalType": "uint80",
						"name": "answeredInRound",
						"type": "uint80"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "proposedLatestRoundData",
				"outputs": [
					{
						"internalType": "uint80",
						"name": "id",
						"type": "uint80"
					},
					{
						"internalType": "int256",
						"name": "answer",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "startedAt",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "updatedAt",
						"type": "uint256"
					},
					{
						"internalType": "uint80",
						"name": "answeredInRound",
						"type": "uint80"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "version",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"confirmAggregator(address)": {
					"details": "Reverts if the given address doesn't match what was previously proposed",
					"params": {
						"aggregatorAddress": "The new address for the aggregator contract"
					}
				},
				"getAnswer(uint256)": {
					"details": "#[deprecated] Use getRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended getRoundData instead which includes better verification information.",
					"params": {
						"roundId": "the answer number to retrieve the answer for"
					}
				},
				"getRoundData(uint80)": {
					"details": "Note that answer and updatedAt may change between queries.",
					"params": {
						"roundId": "the requested round ID as presented through the proxy, this is made up of the aggregator's round ID with the phase ID encoded in the two highest order bytes"
					},
					"returns": {
						"answer": "is the answer for the given round",
						"answeredInRound": "is the round ID of the round in which the answer was computed. (Only some AggregatorV3Interface implementations return meaningful values)",
						"id": "is the round ID from the aggregator for which the data was retrieved combined with an phase to ensure that round IDs get larger as time moves forward.",
						"startedAt": "is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)",
						"updatedAt": "is the timestamp when the round last was updated (i.e. answer was last computed)"
					}
				},
				"getTimestamp(uint256)": {
					"details": "#[deprecated] Use getRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended getRoundData instead which includes better verification information.",
					"params": {
						"roundId": "the answer number to retrieve the updated timestamp for"
					}
				},
				"latestAnswer()": {
					"details": "#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information."
				},
				"latestRound()": {
					"details": "#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information."
				},
				"latestRoundData()": {
					"details": "Note that answer and updatedAt may change between queries.",
					"returns": {
						"answer": "is the answer for the given round",
						"answeredInRound": "is the round ID of the round in which the answer was computed. (Only some AggregatorV3Interface implementations return meaningful values)",
						"id": "is the round ID from the aggregator for which the data was retrieved combined with an phase to ensure that round IDs get larger as time moves forward.",
						"startedAt": "is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)",
						"updatedAt": "is the timestamp when the round last was updated (i.e. answer was last computed)"
					}
				},
				"latestTimestamp()": {
					"details": "#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information."
				},
				"phaseAggregators(uint16)": {
					"params": {
						"phaseId": "uint16"
					}
				},
				"proposeAggregator(address)": {
					"params": {
						"aggregatorAddress": "The new address for the aggregator contract"
					}
				},
				"proposedGetRoundData(uint80)": {
					"params": {
						"roundId": "the round ID to retrieve the round data for"
					},
					"returns": {
						"answer": "is the answer for the given round",
						"answeredInRound": "is the round ID of the round in which the answer was computed.",
						"id": "is the round ID for which data was retrieved",
						"startedAt": "is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)",
						"updatedAt": "is the timestamp when the round last was updated (i.e. answer was last computed)"
					}
				},
				"proposedLatestRoundData()": {
					"returns": {
						"answer": "is the answer for the given round",
						"answeredInRound": "is the round ID of the round in which the answer was computed.",
						"id": "is the round ID for which data was retrieved",
						"startedAt": "is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)",
						"updatedAt": "is the timestamp when the round last was updated (i.e. answer was last computed)"
					}
				}
			},
			"title": "A trusted proxy for updating where current answers are read from",
			"version": 1
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b5060405161173c38038061173c8339818101604052602081101561003357600080fd5b5051600080546001600160a01b0319163317905561005081610056565b506100c5565b60048054604080518082018252600161ffff80851691909101168082526001600160a01b0395909516602091820181905261ffff19909316851762010000600160b01b0319166201000084021790935560009384526003909252912080546001600160a01b0319169091179055565b611668806100d46000396000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c80638da5cb5b116100d8578063b633620c1161008c578063f2fde38b11610066578063f2fde38b146103e5578063f8a2abd314610418578063feaf968c1461044b57610177565b8063b633620c1461039f578063c1597304146103bc578063e8c4be30146103dd57610177565b80639a6fc8f5116100bd5780639a6fc8f514610326578063a928c0961461034f578063b5ab58dc1461038257610177565b80638da5cb5b146103165780638f6b4d911461031e57610177565b80636001ac531161012f5780637284e416116101145780637284e4161461028757806379ba5097146103045780638205bf6a1461030e57610177565b80636001ac531461020c578063668a0f021461027f57610177565b806350d25bcd1161016057806350d25bcd146101cb57806354fd4d50146101e557806358303b10146101ed57610177565b8063245a7bfc1461017c578063313ce567146101ad575b600080fd5b610184610453565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101b5610475565b6040805160ff9092168252519081900360200190f35b6101d3610513565b60408051918252519081900360200190f35b6101d3610580565b6101f56105ed565b6040805161ffff9092168252519081900360200190f35b6102356004803603602081101561022257600080fd5b503569ffffffffffffffffffff166105f7565b604051808669ffffffffffffffffffff1681526020018581526020018481526020018381526020018269ffffffffffffffffffff1681526020019550505050505060405180910390f35b6101d3610756565b61028f61082e565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102c95781810151838201526020016102b1565b50505050905090810190601f1680156102f65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61030c6109ab565b005b6101d3610aad565b610184610b1a565b610235610b36565b6102356004803603602081101561033c57600080fd5b503569ffffffffffffffffffff16610c7f565b61030c6004803603602081101561036557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610da2565b6101d36004803603602081101561039857600080fd5b5035610f5f565b6101d3600480360360208110156103b557600080fd5b5035611059565b610184600480360360208110156103d257600080fd5b503561ffff1661111c565b610184611148565b61030c600480360360208110156103fb57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611164565b61030c6004803603602081101561042e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166112e5565b6102356113e9565b60045462010000900473ffffffffffffffffffffffffffffffffffffffff1690565b6000600460000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156104e257600080fd5b505afa1580156104f6573d6000803e3d6000fd5b505050506040513d602081101561050c57600080fd5b5051905090565b6000600460000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104e257600080fd5b6000600460000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156104e257600080fd5b60045461ffff1690565b600254600090819081908190819073ffffffffffffffffffffffffffffffffffffffff1661068657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4e6f2070726f706f7365642061676772656761746f722070726573656e740000604482015290519081900360640190fd5b600254604080517f9a6fc8f500000000000000000000000000000000000000000000000000000000815269ffffffffffffffffffff89166004820152905173ffffffffffffffffffffffffffffffffffffffff90921691639a6fc8f59160248082019260a092909190829003018186803b15801561070357600080fd5b505afa158015610717573d6000803e3d6000fd5b505050506040513d60a081101561072d57600080fd5b508051602082015160408301516060840151608090940151929a91995097509195509350915050565b600061076061161b565b506040805180820182526004805461ffff81168084526201000090910473ffffffffffffffffffffffffffffffffffffffff16602080850182905285517f668a0f020000000000000000000000000000000000000000000000000000000081529551949561081c959394929363668a0f02938281019392829003018186803b1580156107eb57600080fd5b505afa1580156107ff573d6000803e3d6000fd5b505050506040513d602081101561081557600080fd5b50516114f6565b69ffffffffffffffffffff1691505090565b6060600460000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637284e4166040518163ffffffff1660e01b815260040160006040518083038186803b15801561089b57600080fd5b505afa1580156108af573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156108f657600080fd5b810190808051604051939291908464010000000082111561091657600080fd5b90830190602082018581111561092b57600080fd5b825164010000000081118282018810171561094557600080fd5b82525081516020918201929091019080838360005b8381101561097257818101518382015260200161095a565b50505050905090810190601f16801561099f5780820380516001836020036101000a031916815260200191505b50604052505050905090565b60015473ffffffffffffffffffffffffffffffffffffffff163314610a3157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015290519081900360640190fd5b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6000600460000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638205bf6a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104e257600080fd5b60005473ffffffffffffffffffffffffffffffffffffffff1690565b600254600090819081908190819073ffffffffffffffffffffffffffffffffffffffff16610bc557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4e6f2070726f706f7365642061676772656761746f722070726573656e740000604482015290519081900360640190fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610c2d57600080fd5b505afa158015610c41573d6000803e3d6000fd5b505050506040513d60a0811015610c5757600080fd5b5080516020820151604083015160608401516080909401519299919850965091945092509050565b6000806000806000806000610c9f8869ffffffffffffffffffff16611516565b61ffff8216600090815260036020526040908190205481517f9a6fc8f500000000000000000000000000000000000000000000000000000000815267ffffffffffffffff84166004820152915193955091935073ffffffffffffffffffffffffffffffffffffffff90911691639a6fc8f59160248082019260a092909190829003018186803b158015610d3157600080fd5b505afa158015610d45573d6000803e3d6000fd5b505050506040513d60a0811015610d5b57600080fd5b508051602082015160408301516060840151608090940151929a5090985096509094509250610d8e87878787878761151e565b939c929b5090995097509095509350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e2857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b60025473ffffffffffffffffffffffffffffffffffffffff828116911614610eb157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f496e76616c69642070726f706f7365642061676772656761746f720000000000604482015290519081900360640190fd5b600454600280547fffffffffffffffffffffffff000000000000000000000000000000000000000016905562010000900473ffffffffffffffffffffffffffffffffffffffff16610f0182611554565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f33745f67a407dcb785417f9c123dd3641479a102674b6e35c1f10975625b90e960405160405180910390a35050565b600069ffffffffffffffffffff821115610f7b57506000611054565b600080610f8784611516565b61ffff8216600090815260036020526040902054919350915073ffffffffffffffffffffffffffffffffffffffff1680610fc75760009350505050611054565b8073ffffffffffffffffffffffffffffffffffffffff1663b5ab58dc836040518263ffffffff1660e01b8152600401808267ffffffffffffffff16815260200191505060206040518083038186803b15801561102257600080fd5b505afa158015611036573d6000803e3d6000fd5b505050506040513d602081101561104c57600080fd5b505193505050505b919050565b600069ffffffffffffffffffff82111561107557506000611054565b60008061108184611516565b61ffff8216600090815260036020526040902054919350915073ffffffffffffffffffffffffffffffffffffffff16806110c15760009350505050611054565b8073ffffffffffffffffffffffffffffffffffffffff1663b633620c836040518263ffffffff1660e01b8152600401808267ffffffffffffffff16815260200191505060206040518083038186803b15801561102257600080fd5b61ffff1660009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60025473ffffffffffffffffffffffffffffffffffffffff1690565b60005473ffffffffffffffffffffffffffffffffffffffff1633146111ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811633141561126f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60005473ffffffffffffffffffffffffffffffffffffffff16331461136b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560045460405191926201000090910416907fc0f151710f03d713b71d9970cee0d5b11ddc9a7552abaa3f6ee818010f21600d90600090a350565b60008060008060006113f961161b565b506040805180820182526004805461ffff8116835262010000900473ffffffffffffffffffffffffffffffffffffffff166020830181905283517ffeaf968c00000000000000000000000000000000000000000000000000000000815293519293909263feaf968c928281019260a0929190829003018186803b15801561147f57600080fd5b505afa158015611493573d6000803e3d6000fd5b505050506040513d60a08110156114a957600080fd5b5080516020820151604083015160608401516080909401518551939a5091985096509194509092506114e4908790879087908790879061151e565b95509550955095509550509091929394565b67ffffffffffffffff1660409190911b69ffff0000000000000000161790565b604081901c91565b6000806000806000611530868c6114f6565b8a8a8a61153d8a8c6114f6565b939f929e50909c509a509098509650505050505050565b60048054604080518082018252600161ffff808516919091011680825273ffffffffffffffffffffffffffffffffffffffff9590951660209182018190527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000090931685177fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000084021790935560009384526003909252912080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055565b60408051808201909152600080825260208201529056fea26469706673582212209cc54216c058b5bb0b8c0a671058eb0854a2593821f628c53302d984bd05289a64736f6c63430007000033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x173C CODESIZE SUB DUP1 PUSH2 0x173C DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x50 DUP2 PUSH2 0x56 JUMP JUMPDEST POP PUSH2 0xC5 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x1 PUSH2 0xFFFF DUP1 DUP6 AND SWAP2 SWAP1 SWAP2 ADD AND DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP1 SWAP6 AND PUSH1 0x20 SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0xFFFF NOT SWAP1 SWAP4 AND DUP6 OR PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT AND PUSH3 0x10000 DUP5 MUL OR SWAP1 SWAP4 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x3 SWAP1 SWAP3 MSTORE SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1668 DUP1 PUSH2 0xD4 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x177 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xD8 JUMPI DUP1 PUSH4 0xB633620C GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xF2FDE38B GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3E5 JUMPI DUP1 PUSH4 0xF8A2ABD3 EQ PUSH2 0x418 JUMPI DUP1 PUSH4 0xFEAF968C EQ PUSH2 0x44B JUMPI PUSH2 0x177 JUMP JUMPDEST DUP1 PUSH4 0xB633620C EQ PUSH2 0x39F JUMPI DUP1 PUSH4 0xC1597304 EQ PUSH2 0x3BC JUMPI DUP1 PUSH4 0xE8C4BE30 EQ PUSH2 0x3DD JUMPI PUSH2 0x177 JUMP JUMPDEST DUP1 PUSH4 0x9A6FC8F5 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0x9A6FC8F5 EQ PUSH2 0x326 JUMPI DUP1 PUSH4 0xA928C096 EQ PUSH2 0x34F JUMPI DUP1 PUSH4 0xB5AB58DC EQ PUSH2 0x382 JUMPI PUSH2 0x177 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x316 JUMPI DUP1 PUSH4 0x8F6B4D91 EQ PUSH2 0x31E JUMPI PUSH2 0x177 JUMP JUMPDEST DUP1 PUSH4 0x6001AC53 GT PUSH2 0x12F JUMPI DUP1 PUSH4 0x7284E416 GT PUSH2 0x114 JUMPI DUP1 PUSH4 0x7284E416 EQ PUSH2 0x287 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x304 JUMPI DUP1 PUSH4 0x8205BF6A EQ PUSH2 0x30E JUMPI PUSH2 0x177 JUMP JUMPDEST DUP1 PUSH4 0x6001AC53 EQ PUSH2 0x20C JUMPI DUP1 PUSH4 0x668A0F02 EQ PUSH2 0x27F JUMPI PUSH2 0x177 JUMP JUMPDEST DUP1 PUSH4 0x50D25BCD GT PUSH2 0x160 JUMPI DUP1 PUSH4 0x50D25BCD EQ PUSH2 0x1CB JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x1E5 JUMPI DUP1 PUSH4 0x58303B10 EQ PUSH2 0x1ED JUMPI PUSH2 0x177 JUMP JUMPDEST DUP1 PUSH4 0x245A7BFC EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1AD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x184 PUSH2 0x453 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1B5 PUSH2 0x475 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1D3 PUSH2 0x513 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1D3 PUSH2 0x580 JUMP JUMPDEST PUSH2 0x1F5 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0xFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x235 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x5F7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP7 PUSH10 0xFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH10 0xFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D3 PUSH2 0x756 JUMP JUMPDEST PUSH2 0x28F PUSH2 0x82E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2C9 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2B1 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x2F6 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x30C PUSH2 0x9AB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D3 PUSH2 0xAAD JUMP JUMPDEST PUSH2 0x184 PUSH2 0xB1A JUMP JUMPDEST PUSH2 0x235 PUSH2 0xB36 JUMP JUMPDEST PUSH2 0x235 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x33C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC7F JUMP JUMPDEST PUSH2 0x30C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x365 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xDA2 JUMP JUMPDEST PUSH2 0x1D3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x398 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xF5F JUMP JUMPDEST PUSH2 0x1D3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1059 JUMP JUMPDEST PUSH2 0x184 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xFFFF AND PUSH2 0x111C JUMP JUMPDEST PUSH2 0x184 PUSH2 0x1148 JUMP JUMPDEST PUSH2 0x30C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1164 JUMP JUMPDEST PUSH2 0x30C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x42E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x12E5 JUMP JUMPDEST PUSH2 0x235 PUSH2 0x13E9 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4F6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x50C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x50D25BCD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x54FD4D50 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x686 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F2070726F706F7365642061676772656761746F722070726573656E740000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x9A6FC8F500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 PUSH4 0x9A6FC8F5 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0xA0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x703 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x717 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x72D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 SWAP1 SWAP5 ADD MLOAD SWAP3 SWAP11 SWAP2 SWAP10 POP SWAP8 POP SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x760 PUSH2 0x161B JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x4 DUP1 SLOAD PUSH2 0xFFFF DUP2 AND DUP1 DUP5 MSTORE PUSH3 0x10000 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP1 DUP6 ADD DUP3 SWAP1 MSTORE DUP6 MLOAD PUSH32 0x668A0F0200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP6 MLOAD SWAP5 SWAP6 PUSH2 0x81C SWAP6 SWAP4 SWAP5 SWAP3 SWAP4 PUSH4 0x668A0F02 SWAP4 DUP3 DUP2 ADD SWAP4 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x815 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x14F6 JUMP JUMPDEST PUSH10 0xFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 PUSH1 0x0 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7284E416 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x89B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8AF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x916 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x92B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH5 0x100000000 DUP2 GT DUP3 DUP3 ADD DUP9 LT OR ISZERO PUSH2 0x945 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x972 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x95A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x99F JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xA31 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP1 DUP4 AND DUP3 OR DUP5 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x8205BF6A PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xBC5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F2070726F706F7365642061676772656761746F722070726573656E740000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFEAF968C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC41 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0xC57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 SWAP1 SWAP5 ADD MLOAD SWAP3 SWAP10 SWAP2 SWAP9 POP SWAP7 POP SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xC9F DUP9 PUSH10 0xFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1516 JUMP JUMPDEST PUSH2 0xFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD DUP2 MLOAD PUSH32 0x9A6FC8F500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH8 0xFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 MLOAD SWAP4 SWAP6 POP SWAP2 SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP2 PUSH4 0x9A6FC8F5 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0xA0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD45 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0xD5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 SWAP1 SWAP5 ADD MLOAD SWAP3 SWAP11 POP SWAP1 SWAP9 POP SWAP7 POP SWAP1 SWAP5 POP SWAP3 POP PUSH2 0xD8E DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x151E JUMP JUMPDEST SWAP4 SWAP13 SWAP3 SWAP12 POP SWAP1 SWAP10 POP SWAP8 POP SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xE28 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xEB1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642070726F706F7365642061676772656761746F720000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE PUSH3 0x10000 SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xF01 DUP3 PUSH2 0x1554 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x33745F67A407DCB785417F9C123DD3641479A102674B6E35C1F10975625B90E9 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xF7B JUMPI POP PUSH1 0x0 PUSH2 0x1054 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xF87 DUP5 PUSH2 0x1516 JUMP JUMPDEST PUSH2 0xFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 PUSH2 0xFC7 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x1054 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB5AB58DC DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1022 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1036 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x104C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP4 POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1075 JUMPI POP PUSH1 0x0 PUSH2 0x1054 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1081 DUP5 PUSH2 0x1516 JUMP JUMPDEST PUSH2 0xFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 PUSH2 0x10C1 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x1054 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB633620C DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1022 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x11EA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND CALLER EQ ISZERO PUSH2 0x126F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP4 AND SWAP2 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x136B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 PUSH3 0x10000 SWAP1 SWAP2 DIV AND SWAP1 PUSH32 0xC0F151710F03D713B71D9970CEE0D5B11DDC9A7552ABAA3F6EE818010F21600D SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x13F9 PUSH2 0x161B JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x4 DUP1 SLOAD PUSH2 0xFFFF DUP2 AND DUP4 MSTORE PUSH3 0x10000 SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE DUP4 MLOAD PUSH32 0xFEAF968C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP4 MLOAD SWAP3 SWAP4 SWAP1 SWAP3 PUSH4 0xFEAF968C SWAP3 DUP3 DUP2 ADD SWAP3 PUSH1 0xA0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x147F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1493 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x14A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 SWAP1 SWAP5 ADD MLOAD DUP6 MLOAD SWAP4 SWAP11 POP SWAP2 SWAP9 POP SWAP7 POP SWAP2 SWAP5 POP SWAP1 SWAP3 POP PUSH2 0x14E4 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH2 0x151E JUMP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x40 SWAP2 SWAP1 SWAP2 SHL PUSH10 0xFFFF0000000000000000 AND OR SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 SWAP1 SHR SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1530 DUP7 DUP13 PUSH2 0x14F6 JUMP JUMPDEST DUP11 DUP11 DUP11 PUSH2 0x153D DUP11 DUP13 PUSH2 0x14F6 JUMP JUMPDEST SWAP4 SWAP16 SWAP3 SWAP15 POP SWAP1 SWAP13 POP SWAP11 POP SWAP1 SWAP9 POP SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x1 PUSH2 0xFFFF DUP1 DUP6 AND SWAP2 SWAP1 SWAP2 ADD AND DUP1 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 SWAP1 SWAP6 AND PUSH1 0x20 SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 SWAP1 SWAP4 AND DUP6 OR PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FFFF AND PUSH3 0x10000 DUP5 MUL OR SWAP1 SWAP4 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x3 SWAP1 SWAP3 MSTORE SWAP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP13 0xC5 TIMESTAMP AND 0xC0 PC 0xB5 0xBB SIGNEXTEND DUP13 EXP PUSH8 0x1058EB0854A25938 0x21 0xF6 0x28 0xC5 CALLER MUL 0xD9 DUP5 0xBD SDIV 0x28 SWAP11 PUSH5 0x736F6C6343 STOP SMOD STOP STOP CALLER ",
				"sourceMap": "393:13686:2:-:0;;;1030:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1030:109:2;470:7:3;:18;;-1:-1:-1;;;;;;470:18:3;1084:10:2;470:18:3;;;1102:32:2::1;1030:109:::0;1102:13:::1;:32::i;:::-;1030:109:::0;393:13686;;12811:260;12894:14;:17;;12938:54;;;;;;;;12894:17;;;;;:21;;;;12938:54;;;;-1:-1:-1;;;;;12938:54:2;;;;;;;;;;;-1:-1:-1;;12921:71:2;;;;;-1:-1:-1;;;;;;12921:71:2;;;;;;;;-1:-1:-1;12998:22:2;;;:18;:22;;;;;:68;;-1:-1:-1;;;;;;12998:68:2;;;;;;12811:260::o;393:13686::-;;;;;;;"
			},
			"deployedBytecode": {
				"immutableReferences": {},
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c80638da5cb5b116100d8578063b633620c1161008c578063f2fde38b11610066578063f2fde38b146103e5578063f8a2abd314610418578063feaf968c1461044b57610177565b8063b633620c1461039f578063c1597304146103bc578063e8c4be30146103dd57610177565b80639a6fc8f5116100bd5780639a6fc8f514610326578063a928c0961461034f578063b5ab58dc1461038257610177565b80638da5cb5b146103165780638f6b4d911461031e57610177565b80636001ac531161012f5780637284e416116101145780637284e4161461028757806379ba5097146103045780638205bf6a1461030e57610177565b80636001ac531461020c578063668a0f021461027f57610177565b806350d25bcd1161016057806350d25bcd146101cb57806354fd4d50146101e557806358303b10146101ed57610177565b8063245a7bfc1461017c578063313ce567146101ad575b600080fd5b610184610453565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101b5610475565b6040805160ff9092168252519081900360200190f35b6101d3610513565b60408051918252519081900360200190f35b6101d3610580565b6101f56105ed565b6040805161ffff9092168252519081900360200190f35b6102356004803603602081101561022257600080fd5b503569ffffffffffffffffffff166105f7565b604051808669ffffffffffffffffffff1681526020018581526020018481526020018381526020018269ffffffffffffffffffff1681526020019550505050505060405180910390f35b6101d3610756565b61028f61082e565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102c95781810151838201526020016102b1565b50505050905090810190601f1680156102f65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61030c6109ab565b005b6101d3610aad565b610184610b1a565b610235610b36565b6102356004803603602081101561033c57600080fd5b503569ffffffffffffffffffff16610c7f565b61030c6004803603602081101561036557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610da2565b6101d36004803603602081101561039857600080fd5b5035610f5f565b6101d3600480360360208110156103b557600080fd5b5035611059565b610184600480360360208110156103d257600080fd5b503561ffff1661111c565b610184611148565b61030c600480360360208110156103fb57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611164565b61030c6004803603602081101561042e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166112e5565b6102356113e9565b60045462010000900473ffffffffffffffffffffffffffffffffffffffff1690565b6000600460000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156104e257600080fd5b505afa1580156104f6573d6000803e3d6000fd5b505050506040513d602081101561050c57600080fd5b5051905090565b6000600460000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104e257600080fd5b6000600460000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156104e257600080fd5b60045461ffff1690565b600254600090819081908190819073ffffffffffffffffffffffffffffffffffffffff1661068657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4e6f2070726f706f7365642061676772656761746f722070726573656e740000604482015290519081900360640190fd5b600254604080517f9a6fc8f500000000000000000000000000000000000000000000000000000000815269ffffffffffffffffffff89166004820152905173ffffffffffffffffffffffffffffffffffffffff90921691639a6fc8f59160248082019260a092909190829003018186803b15801561070357600080fd5b505afa158015610717573d6000803e3d6000fd5b505050506040513d60a081101561072d57600080fd5b508051602082015160408301516060840151608090940151929a91995097509195509350915050565b600061076061161b565b506040805180820182526004805461ffff81168084526201000090910473ffffffffffffffffffffffffffffffffffffffff16602080850182905285517f668a0f020000000000000000000000000000000000000000000000000000000081529551949561081c959394929363668a0f02938281019392829003018186803b1580156107eb57600080fd5b505afa1580156107ff573d6000803e3d6000fd5b505050506040513d602081101561081557600080fd5b50516114f6565b69ffffffffffffffffffff1691505090565b6060600460000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637284e4166040518163ffffffff1660e01b815260040160006040518083038186803b15801561089b57600080fd5b505afa1580156108af573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156108f657600080fd5b810190808051604051939291908464010000000082111561091657600080fd5b90830190602082018581111561092b57600080fd5b825164010000000081118282018810171561094557600080fd5b82525081516020918201929091019080838360005b8381101561097257818101518382015260200161095a565b50505050905090810190601f16801561099f5780820380516001836020036101000a031916815260200191505b50604052505050905090565b60015473ffffffffffffffffffffffffffffffffffffffff163314610a3157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015290519081900360640190fd5b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6000600460000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638205bf6a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104e257600080fd5b60005473ffffffffffffffffffffffffffffffffffffffff1690565b600254600090819081908190819073ffffffffffffffffffffffffffffffffffffffff16610bc557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4e6f2070726f706f7365642061676772656761746f722070726573656e740000604482015290519081900360640190fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610c2d57600080fd5b505afa158015610c41573d6000803e3d6000fd5b505050506040513d60a0811015610c5757600080fd5b5080516020820151604083015160608401516080909401519299919850965091945092509050565b6000806000806000806000610c9f8869ffffffffffffffffffff16611516565b61ffff8216600090815260036020526040908190205481517f9a6fc8f500000000000000000000000000000000000000000000000000000000815267ffffffffffffffff84166004820152915193955091935073ffffffffffffffffffffffffffffffffffffffff90911691639a6fc8f59160248082019260a092909190829003018186803b158015610d3157600080fd5b505afa158015610d45573d6000803e3d6000fd5b505050506040513d60a0811015610d5b57600080fd5b508051602082015160408301516060840151608090940151929a5090985096509094509250610d8e87878787878761151e565b939c929b5090995097509095509350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e2857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b60025473ffffffffffffffffffffffffffffffffffffffff828116911614610eb157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f496e76616c69642070726f706f7365642061676772656761746f720000000000604482015290519081900360640190fd5b600454600280547fffffffffffffffffffffffff000000000000000000000000000000000000000016905562010000900473ffffffffffffffffffffffffffffffffffffffff16610f0182611554565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f33745f67a407dcb785417f9c123dd3641479a102674b6e35c1f10975625b90e960405160405180910390a35050565b600069ffffffffffffffffffff821115610f7b57506000611054565b600080610f8784611516565b61ffff8216600090815260036020526040902054919350915073ffffffffffffffffffffffffffffffffffffffff1680610fc75760009350505050611054565b8073ffffffffffffffffffffffffffffffffffffffff1663b5ab58dc836040518263ffffffff1660e01b8152600401808267ffffffffffffffff16815260200191505060206040518083038186803b15801561102257600080fd5b505afa158015611036573d6000803e3d6000fd5b505050506040513d602081101561104c57600080fd5b505193505050505b919050565b600069ffffffffffffffffffff82111561107557506000611054565b60008061108184611516565b61ffff8216600090815260036020526040902054919350915073ffffffffffffffffffffffffffffffffffffffff16806110c15760009350505050611054565b8073ffffffffffffffffffffffffffffffffffffffff1663b633620c836040518263ffffffff1660e01b8152600401808267ffffffffffffffff16815260200191505060206040518083038186803b15801561102257600080fd5b61ffff1660009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60025473ffffffffffffffffffffffffffffffffffffffff1690565b60005473ffffffffffffffffffffffffffffffffffffffff1633146111ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811633141561126f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60005473ffffffffffffffffffffffffffffffffffffffff16331461136b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560045460405191926201000090910416907fc0f151710f03d713b71d9970cee0d5b11ddc9a7552abaa3f6ee818010f21600d90600090a350565b60008060008060006113f961161b565b506040805180820182526004805461ffff8116835262010000900473ffffffffffffffffffffffffffffffffffffffff166020830181905283517ffeaf968c00000000000000000000000000000000000000000000000000000000815293519293909263feaf968c928281019260a0929190829003018186803b15801561147f57600080fd5b505afa158015611493573d6000803e3d6000fd5b505050506040513d60a08110156114a957600080fd5b5080516020820151604083015160608401516080909401518551939a5091985096509194509092506114e4908790879087908790879061151e565b95509550955095509550509091929394565b67ffffffffffffffff1660409190911b69ffff0000000000000000161790565b604081901c91565b6000806000806000611530868c6114f6565b8a8a8a61153d8a8c6114f6565b939f929e50909c509a509098509650505050505050565b60048054604080518082018252600161ffff808516919091011680825273ffffffffffffffffffffffffffffffffffffffff9590951660209182018190527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000090931685177fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000084021790935560009384526003909252912080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055565b60408051808201909152600080825260208201529056fea26469706673582212209cc54216c058b5bb0b8c0a671058eb0854a2593821f628c53302d984bd05289a64736f6c63430007000033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x177 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xD8 JUMPI DUP1 PUSH4 0xB633620C GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xF2FDE38B GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3E5 JUMPI DUP1 PUSH4 0xF8A2ABD3 EQ PUSH2 0x418 JUMPI DUP1 PUSH4 0xFEAF968C EQ PUSH2 0x44B JUMPI PUSH2 0x177 JUMP JUMPDEST DUP1 PUSH4 0xB633620C EQ PUSH2 0x39F JUMPI DUP1 PUSH4 0xC1597304 EQ PUSH2 0x3BC JUMPI DUP1 PUSH4 0xE8C4BE30 EQ PUSH2 0x3DD JUMPI PUSH2 0x177 JUMP JUMPDEST DUP1 PUSH4 0x9A6FC8F5 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0x9A6FC8F5 EQ PUSH2 0x326 JUMPI DUP1 PUSH4 0xA928C096 EQ PUSH2 0x34F JUMPI DUP1 PUSH4 0xB5AB58DC EQ PUSH2 0x382 JUMPI PUSH2 0x177 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x316 JUMPI DUP1 PUSH4 0x8F6B4D91 EQ PUSH2 0x31E JUMPI PUSH2 0x177 JUMP JUMPDEST DUP1 PUSH4 0x6001AC53 GT PUSH2 0x12F JUMPI DUP1 PUSH4 0x7284E416 GT PUSH2 0x114 JUMPI DUP1 PUSH4 0x7284E416 EQ PUSH2 0x287 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x304 JUMPI DUP1 PUSH4 0x8205BF6A EQ PUSH2 0x30E JUMPI PUSH2 0x177 JUMP JUMPDEST DUP1 PUSH4 0x6001AC53 EQ PUSH2 0x20C JUMPI DUP1 PUSH4 0x668A0F02 EQ PUSH2 0x27F JUMPI PUSH2 0x177 JUMP JUMPDEST DUP1 PUSH4 0x50D25BCD GT PUSH2 0x160 JUMPI DUP1 PUSH4 0x50D25BCD EQ PUSH2 0x1CB JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x1E5 JUMPI DUP1 PUSH4 0x58303B10 EQ PUSH2 0x1ED JUMPI PUSH2 0x177 JUMP JUMPDEST DUP1 PUSH4 0x245A7BFC EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1AD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x184 PUSH2 0x453 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1B5 PUSH2 0x475 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1D3 PUSH2 0x513 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1D3 PUSH2 0x580 JUMP JUMPDEST PUSH2 0x1F5 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0xFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x235 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x5F7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP7 PUSH10 0xFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH10 0xFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D3 PUSH2 0x756 JUMP JUMPDEST PUSH2 0x28F PUSH2 0x82E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2C9 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2B1 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x2F6 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x30C PUSH2 0x9AB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D3 PUSH2 0xAAD JUMP JUMPDEST PUSH2 0x184 PUSH2 0xB1A JUMP JUMPDEST PUSH2 0x235 PUSH2 0xB36 JUMP JUMPDEST PUSH2 0x235 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x33C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC7F JUMP JUMPDEST PUSH2 0x30C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x365 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xDA2 JUMP JUMPDEST PUSH2 0x1D3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x398 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xF5F JUMP JUMPDEST PUSH2 0x1D3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1059 JUMP JUMPDEST PUSH2 0x184 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xFFFF AND PUSH2 0x111C JUMP JUMPDEST PUSH2 0x184 PUSH2 0x1148 JUMP JUMPDEST PUSH2 0x30C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1164 JUMP JUMPDEST PUSH2 0x30C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x42E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x12E5 JUMP JUMPDEST PUSH2 0x235 PUSH2 0x13E9 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4F6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x50C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x50D25BCD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x54FD4D50 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x686 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F2070726F706F7365642061676772656761746F722070726573656E740000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x9A6FC8F500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 PUSH4 0x9A6FC8F5 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0xA0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x703 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x717 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x72D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 SWAP1 SWAP5 ADD MLOAD SWAP3 SWAP11 SWAP2 SWAP10 POP SWAP8 POP SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x760 PUSH2 0x161B JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x4 DUP1 SLOAD PUSH2 0xFFFF DUP2 AND DUP1 DUP5 MSTORE PUSH3 0x10000 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP1 DUP6 ADD DUP3 SWAP1 MSTORE DUP6 MLOAD PUSH32 0x668A0F0200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP6 MLOAD SWAP5 SWAP6 PUSH2 0x81C SWAP6 SWAP4 SWAP5 SWAP3 SWAP4 PUSH4 0x668A0F02 SWAP4 DUP3 DUP2 ADD SWAP4 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x815 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x14F6 JUMP JUMPDEST PUSH10 0xFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 PUSH1 0x0 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7284E416 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x89B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8AF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x916 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x92B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH5 0x100000000 DUP2 GT DUP3 DUP3 ADD DUP9 LT OR ISZERO PUSH2 0x945 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x972 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x95A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x99F JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xA31 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP1 DUP4 AND DUP3 OR DUP5 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x8205BF6A PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xBC5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F2070726F706F7365642061676772656761746F722070726573656E740000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFEAF968C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC41 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0xC57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 SWAP1 SWAP5 ADD MLOAD SWAP3 SWAP10 SWAP2 SWAP9 POP SWAP7 POP SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xC9F DUP9 PUSH10 0xFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1516 JUMP JUMPDEST PUSH2 0xFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD DUP2 MLOAD PUSH32 0x9A6FC8F500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH8 0xFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 MLOAD SWAP4 SWAP6 POP SWAP2 SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP2 PUSH4 0x9A6FC8F5 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0xA0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD45 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0xD5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 SWAP1 SWAP5 ADD MLOAD SWAP3 SWAP11 POP SWAP1 SWAP9 POP SWAP7 POP SWAP1 SWAP5 POP SWAP3 POP PUSH2 0xD8E DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x151E JUMP JUMPDEST SWAP4 SWAP13 SWAP3 SWAP12 POP SWAP1 SWAP10 POP SWAP8 POP SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xE28 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xEB1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642070726F706F7365642061676772656761746F720000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE PUSH3 0x10000 SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xF01 DUP3 PUSH2 0x1554 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x33745F67A407DCB785417F9C123DD3641479A102674B6E35C1F10975625B90E9 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xF7B JUMPI POP PUSH1 0x0 PUSH2 0x1054 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xF87 DUP5 PUSH2 0x1516 JUMP JUMPDEST PUSH2 0xFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 PUSH2 0xFC7 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x1054 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB5AB58DC DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1022 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1036 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x104C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP4 POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1075 JUMPI POP PUSH1 0x0 PUSH2 0x1054 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1081 DUP5 PUSH2 0x1516 JUMP JUMPDEST PUSH2 0xFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 PUSH2 0x10C1 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x1054 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB633620C DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1022 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x11EA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND CALLER EQ ISZERO PUSH2 0x126F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP4 AND SWAP2 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x136B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 PUSH3 0x10000 SWAP1 SWAP2 DIV AND SWAP1 PUSH32 0xC0F151710F03D713B71D9970CEE0D5B11DDC9A7552ABAA3F6EE818010F21600D SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x13F9 PUSH2 0x161B JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x4 DUP1 SLOAD PUSH2 0xFFFF DUP2 AND DUP4 MSTORE PUSH3 0x10000 SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE DUP4 MLOAD PUSH32 0xFEAF968C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP4 MLOAD SWAP3 SWAP4 SWAP1 SWAP3 PUSH4 0xFEAF968C SWAP3 DUP3 DUP2 ADD SWAP3 PUSH1 0xA0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x147F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1493 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x14A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 SWAP1 SWAP5 ADD MLOAD DUP6 MLOAD SWAP4 SWAP11 POP SWAP2 SWAP9 POP SWAP7 POP SWAP2 SWAP5 POP SWAP1 SWAP3 POP PUSH2 0x14E4 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH2 0x151E JUMP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x40 SWAP2 SWAP1 SWAP2 SHL PUSH10 0xFFFF0000000000000000 AND OR SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 SWAP1 SHR SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1530 DUP7 DUP13 PUSH2 0x14F6 JUMP JUMPDEST DUP11 DUP11 DUP11 PUSH2 0x153D DUP11 DUP13 PUSH2 0x14F6 JUMP JUMPDEST SWAP4 SWAP16 SWAP3 SWAP15 POP SWAP1 SWAP13 POP SWAP11 POP SWAP1 SWAP9 POP SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x1 PUSH2 0xFFFF DUP1 DUP6 AND SWAP2 SWAP1 SWAP2 ADD AND DUP1 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 SWAP1 SWAP6 AND PUSH1 0x20 SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 SWAP1 SWAP4 AND DUP6 OR PUSH32 0xFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FFFF AND PUSH3 0x10000 DUP5 MUL OR SWAP1 SWAP4 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x3 SWAP1 SWAP3 MSTORE SWAP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP13 0xC5 TIMESTAMP AND 0xC0 PC 0xB5 0xBB SIGNEXTEND DUP13 EXP PUSH8 0x1058EB0854A25938 0x21 0xF6 0x28 0xC5 CALLER MUL 0xD9 DUP5 0xBD SDIV 0x28 SWAP11 PUSH5 0x736F6C6343 STOP SMOD STOP STOP CALLER ",
				"sourceMap": "393:13686:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10223:133;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10628:131;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1522:157;;;:::i;:::-;;;;;;;;;;;;;;;;10869:131;;;:::i;10417:112::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8994:310;;;;;;;;;;;;;;;;-1:-1:-1;8994:310:2;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4420:240;;;:::i;11092:145::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;904:262:3;;;:::i;:::-;;2067:167:2;;;:::i;1217:72:3:-;;;:::i;9851:295:2:-;;;:::i;6091:536::-;;;;;;;;;;;;;;;;-1:-1:-1;6091:536:2;;;;:::i;12385:395::-;;;;;;;;;;;;;;;;-1:-1:-1;12385:395:2;;;;:::i;2645:398::-;;;;;;;;;;;;;;;;-1:-1:-1;2645:398:2;;:::i;3493:408::-;;;;;;;;;;;;;;;;-1:-1:-1;3493:408:2;;:::i;11547:155::-;;;;;;;;;;;;;;;;-1:-1:-1;11547:155:2;;;;:::i;11306:136::-;;;:::i;602:210:3:-;;;;;;;;;;;;;;;;-1:-1:-1;602:210:3;;;;:::i;11866:246:2:-;;;;;;;;;;;;;;;;-1:-1:-1;11866:246:2;;;;:::i;7880:503::-;;;:::i;10223:133::-;10325:14;:25;;;;;;;10223:133::o;10628:131::-;10696:5;10718:14;:25;;;;;;;;;;;;:34;;;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10718:36:2;;-1:-1:-1;10628:131:2;:::o;1522:157::-;1604:13;1634:14;:25;;;;;;;;;;;;:38;;;:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10869:131;10936:7;10960:14;:25;;;;;;;;;;;;:33;;;:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10417:112;10507:14;:17;;;10417:112;:::o;8994:310::-;13994:20;;9125:9;;;;;;;;;;13986:43;13994:20;13978:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9257:20:::1;::::0;:42:::1;::::0;;;;;::::1;::::0;::::1;;::::0;::::1;::::0;;;:20:::1;::::0;;::::1;::::0;:33:::1;::::0;:42;;;;;::::1;::::0;;;;;;;;;:20;:42;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;9257:42:2;;::::1;::::0;::::1;::::0;;;;;;;;;;;;;;;;;;-1:-1:-1;9257:42:2;-1:-1:-1;9257:42:2;;-1:-1:-1;9257:42:2;-1:-1:-1;8994:310:2;-1:-1:-1;;8994:310:2:o;4420:240::-;4501:15;4526:18;;:::i;:::-;-1:-1:-1;4526:35:2;;;;;;;;4547:14;4526:35;;;;;;;;;;;;;;;;;;;;;4623:30;;;;;;;4526:35;;4597:58;;4526:35;;;;4623:28;;:30;;;;4526:35;4623:30;;;;;4526:35;4623:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4623:30:2;4597:8;:58::i;:::-;4590:65;;;;;4420:240;:::o;11092:145::-;11163:13;11193:14;:25;;;;;;;;;;;;:37;;;:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11193:39:2;;;;;;;;;;-1:-1:-1;11193:39:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11186:46;;11092:145;:::o;904:262:3:-;974:14;;;;960:10;:28;952:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1022:16;1041:7;;1064:10;1054:20;;;;;;;;-1:-1:-1;1080:27:3;;;;;;;1119:42;;1041:7;;;;;1064:10;;1041:7;;1119:42;;;904:262;:::o;2067:167:2:-;2152:17;2186:14;:25;;;;;;;;;;;;:41;;;:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1217:72:3;1255:7;1277;;;1217:72;:::o;9851:295:2:-;13994:20;;9971:9;;;;;;;;;;13986:43;13994:20;13978:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10103:20:::1;;;;;;;;;;;:36;;;:38;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;10103:38:2;;::::1;::::0;::::1;::::0;;;;;;;;;;;;;;;;;;-1:-1:-1;10103:38:2;-1:-1:-1;10103:38:2;;-1:-1:-1;10103:38:2;-1:-1:-1;9851:295:2;-1:-1:-1;9851:295:2:o;6091:536::-;6194:9;6211:13;6232:17;6257;6282:22;6320:14;6336:24;6364:17;6373:7;6364:17;;:8;:17::i;:::-;6478:27;;;;;;;:18;:27;;;;;;;;:59;;;;;;;;;;;;;;6319:62;;-1:-1:-1;6319:62:2;;-1:-1:-1;6478:27:2;;;;;:40;;:59;;;;;;;;;;;;;;;:27;:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6478:59:2;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6478:59:2;;-1:-1:-1;6478:59:2;-1:-1:-1;6478:59:2;;-1:-1:-1;6478:59:2;-1:-1:-1;6551:71:2;6478:59;;;;;6614:7;6551:11;:71::i;:::-;6544:78;;;;-1:-1:-1;6544:78:2;;-1:-1:-1;6544:78:2;-1:-1:-1;6544:78:2;;-1:-1:-1;6091:536:2;-1:-1:-1;;;;6091:536:2:o;12385:395::-;1426:7:3;;;;1412:10;:21;1404:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12513:20:2::1;::::0;::::1;12484:50:::0;;::::1;12513:20:::0;::::1;12484:50;12476:90;;;::::0;;::::1;::::0;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;12609:14;:25:::0;::::1;12641:27:::0;;;::::1;::::0;;12609:25;;::::1;;;12674:32;12688:17:::0;12674:13:::1;:32::i;:::-;12757:17;12717:58;;12737:18;12717:58;;;;;;;;;;;;1466:1:3;12385:395:2::0;:::o;2645:398::-;2739:13;834:32;2766:16;;2762:30;;;-1:-1:-1;2791:1:2;2784:8;;2762:30;2800:14;2816:24;2844:17;2853:7;2844:8;:17::i;:::-;2905:27;;;2867:35;2905:27;;;:18;:27;;;;;;2799:62;;-1:-1:-1;2799:62:2;-1:-1:-1;2905:27:2;;2942:33;2938:47;;2984:1;2977:8;;;;;;;2938:47;2999:10;:20;;;3020:17;2999:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2999:39:2;;-1:-1:-1;;;;2645:398:2;;;;:::o;3493:408::-;3590:17;834:32;3621:16;;3617:30;;;-1:-1:-1;3646:1:2;3639:8;;3617:30;3655:14;3671:24;3699:17;3708:7;3699:8;:17::i;:::-;3760:27;;;3722:35;3760:27;;;:18;:27;;;;;;3654:62;;-1:-1:-1;3654:62:2;-1:-1:-1;3760:27:2;;3797:33;3793:47;;3839:1;3832:8;;;;;;;3793:47;3854:10;:23;;;3878:17;3854:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11547:155;11669:27;;11637:7;11669:27;;;:18;:27;;;;;;;;;11547:155::o;11306:136::-;11416:20;;;;11306:136;:::o;602:210:3:-;1426:7;;;;1412:10;:21;1404:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;686:16:::1;::::0;::::1;692:10;686:16;;678:52;;;::::0;;::::1;::::0;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;737:14;:19:::0;;;::::1;;::::0;;::::1;::::0;;::::1;::::0;;;-1:-1:-1;795:7:3;;768:39:::1;::::0;737:19;;795:7:::1;::::0;768:39:::1;::::0;-1:-1:-1;768:39:3::1;602:210:::0;:::o;11866:246:2:-;1426:7:3;;;;1412:10;:21;1404:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11957:20:2::1;:66:::0;;;::::1;;::::0;;::::1;::::0;;::::1;::::0;;;12061:14:::1;:25:::0;12034:73:::1;::::0;11957:66;;12061:25;;;::::1;;::::0;12034:73:::1;::::0;-1:-1:-1;;12034:73:2::1;11866:246:::0;:::o;7880:503::-;7972:9;7989:13;8010:17;8035;8060:22;8097:20;;:::i;:::-;-1:-1:-1;8097:37:2;;;;;;;;8120:14;8097:37;;;;;;;;;;;;;;;;;;8254:36;;;;;;;8097:37;;;;8254:34;;:36;;;;;;;;;;;;;8097:37;8254:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8254:36:2;;;;;;;;;;;;;;;;;;;8367:10;;8254:36;;-1:-1:-1;8254:36:2;;-1:-1:-1;8254:36:2;-1:-1:-1;8254:36:2;;-1:-1:-1;8254:36:2;;-1:-1:-1;8304:74:2;;8254:36;;;;;;;;;;8304:11;:74::i;:::-;8297:81;;;;;;;;;;;7880:503;;;;;:::o;13075:177::-;13203:43;;750:2;13203:30;;;;;;:43;;13075:177::o;13256:245::-;750:2;13382:23;;;13256:245;:::o;13505:413::-;13710:6;13718;13726:7;13735;13744:6;13775:34;13784:7;13800;13775:8;:34::i;:::-;13817:6;13831:9;13848;13865:42;13874:7;13890:15;13865:8;:42::i;:::-;13760:153;;;;-1:-1:-1;13760:153:2;;-1:-1:-1;13760:153:2;-1:-1:-1;13760:153:2;;-1:-1:-1;13505:413:2;-1:-1:-1;;;;;;;13505:413:2:o;12811:260::-;12894:14;:17;;12938:54;;;;;;;;12894:17;;;;;:21;;;;12938:54;;;;;;;;;;;;;;;;12921:71;;;;;;;;;;;;;;;-1:-1:-1;12998:22:2;;;:18;:22;;;;;:68;;;;;;;;;12811:260::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;:::o"
			},
			"methodIdentifiers": {
				"acceptOwnership()": "79ba5097",
				"aggregator()": "245a7bfc",
				"confirmAggregator(address)": "a928c096",
				"decimals()": "313ce567",
				"description()": "7284e416",
				"getAnswer(uint256)": "b5ab58dc",
				"getRoundData(uint80)": "9a6fc8f5",
				"getTimestamp(uint256)": "b633620c",
				"latestAnswer()": "50d25bcd",
				"latestRound()": "668a0f02",
				"latestRoundData()": "feaf968c",
				"latestTimestamp()": "8205bf6a",
				"owner()": "8da5cb5b",
				"phaseAggregators(uint16)": "c1597304",
				"phaseId()": "58303b10",
				"proposeAggregator(address)": "f8a2abd3",
				"proposedAggregator()": "e8c4be30",
				"proposedGetRoundData(uint80)": "6001ac53",
				"proposedLatestRoundData()": "8f6b4d91",
				"transferOwnership(address)": "f2fde38b",
				"version()": "54fd4d50"
			}
		},
		"metadata": "{\"compiler\":{\"version\":\"0.7.0+commit.9e61f92b\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregatorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"latest\",\"type\":\"address\"}],\"name\":\"AggregatorConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposed\",\"type\":\"address\"}],\"name\":\"AggregatorProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregatorAddress\",\"type\":\"address\"}],\"name\":\"confirmAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"id\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"id\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseId\",\"type\":\"uint16\"}],\"name\":\"phaseAggregators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phaseId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregatorAddress\",\"type\":\"address\"}],\"name\":\"proposeAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"}],\"name\":\"proposedGetRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"id\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedLatestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"id\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"confirmAggregator(address)\":{\"details\":\"Reverts if the given address doesn't match what was previously proposed\",\"params\":{\"aggregatorAddress\":\"The new address for the aggregator contract\"}},\"getAnswer(uint256)\":{\"details\":\"#[deprecated] Use getRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended getRoundData instead which includes better verification information.\",\"params\":{\"roundId\":\"the answer number to retrieve the answer for\"}},\"getRoundData(uint80)\":{\"details\":\"Note that answer and updatedAt may change between queries.\",\"params\":{\"roundId\":\"the requested round ID as presented through the proxy, this is made up of the aggregator's round ID with the phase ID encoded in the two highest order bytes\"},\"returns\":{\"answer\":\"is the answer for the given round\",\"answeredInRound\":\"is the round ID of the round in which the answer was computed. (Only some AggregatorV3Interface implementations return meaningful values)\",\"id\":\"is the round ID from the aggregator for which the data was retrieved combined with an phase to ensure that round IDs get larger as time moves forward.\",\"startedAt\":\"is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)\",\"updatedAt\":\"is the timestamp when the round last was updated (i.e. answer was last computed)\"}},\"getTimestamp(uint256)\":{\"details\":\"#[deprecated] Use getRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended getRoundData instead which includes better verification information.\",\"params\":{\"roundId\":\"the answer number to retrieve the updated timestamp for\"}},\"latestAnswer()\":{\"details\":\"#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information.\"},\"latestRound()\":{\"details\":\"#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information.\"},\"latestRoundData()\":{\"details\":\"Note that answer and updatedAt may change between queries.\",\"returns\":{\"answer\":\"is the answer for the given round\",\"answeredInRound\":\"is the round ID of the round in which the answer was computed. (Only some AggregatorV3Interface implementations return meaningful values)\",\"id\":\"is the round ID from the aggregator for which the data was retrieved combined with an phase to ensure that round IDs get larger as time moves forward.\",\"startedAt\":\"is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)\",\"updatedAt\":\"is the timestamp when the round last was updated (i.e. answer was last computed)\"}},\"latestTimestamp()\":{\"details\":\"#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information.\"},\"phaseAggregators(uint16)\":{\"params\":{\"phaseId\":\"uint16\"}},\"proposeAggregator(address)\":{\"params\":{\"aggregatorAddress\":\"The new address for the aggregator contract\"}},\"proposedGetRoundData(uint80)\":{\"params\":{\"roundId\":\"the round ID to retrieve the round data for\"},\"returns\":{\"answer\":\"is the answer for the given round\",\"answeredInRound\":\"is the round ID of the round in which the answer was computed.\",\"id\":\"is the round ID for which data was retrieved\",\"startedAt\":\"is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)\",\"updatedAt\":\"is the timestamp when the round last was updated (i.e. answer was last computed)\"}},\"proposedLatestRoundData()\":{\"returns\":{\"answer\":\"is the answer for the given round\",\"answeredInRound\":\"is the round ID of the round in which the answer was computed.\",\"id\":\"is the round ID for which data was retrieved\",\"startedAt\":\"is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)\",\"updatedAt\":\"is the timestamp when the round last was updated (i.e. answer was last computed)\"}}},\"title\":\"A trusted proxy for updating where current answers are read from\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"aggregator()\":{\"notice\":\"returns the current phase's aggregator address.\"},\"confirmAggregator(address)\":{\"notice\":\"Allows the owner to confirm and change the address to the proposed aggregator\"},\"decimals()\":{\"notice\":\"represents the number of decimals the aggregator responses represent.\"},\"description()\":{\"notice\":\"returns the description of the aggregator the proxy points to.\"},\"getAnswer(uint256)\":{\"notice\":\"get past rounds answers\"},\"getRoundData(uint80)\":{\"notice\":\"get data about a round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorV3Interface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them.\"},\"getTimestamp(uint256)\":{\"notice\":\"get block timestamp when an answer was last updated\"},\"latestAnswer()\":{\"notice\":\"Reads the current answer from aggregator delegated to.\"},\"latestRound()\":{\"notice\":\"get the latest completed round where the answer was updated. This ID includes the proxy's phase, to make sure round IDs increase even when switching to a newly deployed aggregator.\"},\"latestRoundData()\":{\"notice\":\"get data about the latest round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorV3Interface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them.\"},\"latestTimestamp()\":{\"notice\":\"Reads the last updated height from aggregator delegated to.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"phaseAggregators(uint16)\":{\"notice\":\"return a phase aggregator using the phaseId\"},\"phaseId()\":{\"notice\":\"returns the current phase's ID.\"},\"proposeAggregator(address)\":{\"notice\":\"Allows the owner to propose a new address for the aggregator\"},\"proposedAggregator()\":{\"notice\":\"returns the current proposed aggregator\"},\"proposedGetRoundData(uint80)\":{\"notice\":\"Used if an aggregator contract has been proposed.\"},\"proposedLatestRoundData()\":{\"notice\":\"Used if an aggregator contract has been proposed.\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"},\"version()\":{\"notice\":\"the version number representing the type of aggregator the proxy points to.\"}},\"notice\":\"This contract provides a consistent address for the CurrentAnwerInterface but delegates where it reads from to the owner, who is trusted to update it.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/AggregatorProxy.sol\":\"AggregatorProxy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/AggregatorProxy.sol\":{\"keccak256\":\"0xf421c8457590490c277abc89ad08f9eaa2903424acb32f50055a955d0264ea8f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e08908cf56cda4b2f62b56f776e91ee9106c3215008c9ba0752faaffc39485c\",\"dweb:/ipfs/QmfCh1HDwfWmC8P9wpVXzpM4cpMGvQ26UzFqNrZdVf8csK\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/ConfirmedOwner.sol\":{\"keccak256\":\"0xc624754648792f2d6ad8ec9867fac878f60dfbfe8a666d12962db95b3835711b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eca7472f9b38b0cd7754b548905ef323f84d36435b46aaba4f073a1de6f2fed\",\"dweb:/ipfs/QmWkAysxdk8CaPzpsFHaB4udK1nTGSpfPNk4VAweRdZdTh\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/AggregatorInterface.sol\":{\"keccak256\":\"0xf852be8b4d172513729c84650a04c94b91712fa1751ef41c57592b5484daa381\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://690d94f3d2fe189052df5afd1e5bf1ca21b0c2b326ca0ddea7206f96c39df690\",\"dweb:/ipfs/QmW1e6r2K2Y2jmsYzGzbuX2fwew49hFL2TTVpVWHR4Rday\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/AggregatorProxyInterface.sol\":{\"keccak256\":\"0x50cdb910821e1bcac2c3877c092c78c2683d19790ee3f1930399cdd59c351fee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://267e74d6367bd9f711b6b6334cdcdfe365911a484eb07cbaaf78ca4fc95680c0\",\"dweb:/ipfs/QmdNPQz6wFTtkaeCDYURBn4ntiQQaB9LqPF37S1RToYQzF\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/AggregatorV2V3Interface.sol\":{\"keccak256\":\"0xb969044d8965da2adab42da395fbc1ca905926eab2e9a575b6e72dfa8277ee52\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ca99408beefabb53f9f810b24fd62c4031a378d1a8cfb2488d4ff1d408132499\",\"dweb:/ipfs/QmeziawPX8RjMZ8c7eEPKdJuui5kFd3JRW2rH3B47zSXZL\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\":{\"keccak256\":\"0x78af5c13ec137bdbb22ec9d65c730fb6f138d3a61a3fdbb63be4838ce7faf2a6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6284b64b8f0f58ce5b5ec4e4bb99ffc147d5eac462b7158952e0425b54839ca1\",\"dweb:/ipfs/QmZL5txCThgpGwcAjQAYpmcEKEERDCTohXpRE9Nmc4UsMu\"]}},\"version\":1}",
		"userdoc": {
			"kind": "user",
			"methods": {
				"acceptOwnership()": {
					"notice": "Allows an ownership transfer to be completed by the recipient."
				},
				"aggregator()": {
					"notice": "returns the current phase's aggregator address."
				},
				"confirmAggregator(address)": {
					"notice": "Allows the owner to confirm and change the address to the proposed aggregator"
				},
				"decimals()": {
					"notice": "represents the number of decimals the aggregator responses represent."
				},
				"description()": {
					"notice": "returns the description of the aggregator the proxy points to."
				},
				"getAnswer(uint256)": {
					"notice": "get past rounds answers"
				},
				"getRoundData(uint80)": {
					"notice": "get data about a round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorV3Interface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them."
				},
				"getTimestamp(uint256)": {
					"notice": "get block timestamp when an answer was last updated"
				},
				"latestAnswer()": {
					"notice": "Reads the current answer from aggregator delegated to."
				},
				"latestRound()": {
					"notice": "get the latest completed round where the answer was updated. This ID includes the proxy's phase, to make sure round IDs increase even when switching to a newly deployed aggregator."
				},
				"latestRoundData()": {
					"notice": "get data about the latest round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorV3Interface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them."
				},
				"latestTimestamp()": {
					"notice": "Reads the last updated height from aggregator delegated to."
				},
				"owner()": {
					"notice": "Get the current owner"
				},
				"phaseAggregators(uint16)": {
					"notice": "return a phase aggregator using the phaseId"
				},
				"phaseId()": {
					"notice": "returns the current phase's ID."
				},
				"proposeAggregator(address)": {
					"notice": "Allows the owner to propose a new address for the aggregator"
				},
				"proposedAggregator()": {
					"notice": "returns the current proposed aggregator"
				},
				"proposedGetRoundData(uint80)": {
					"notice": "Used if an aggregator contract has been proposed."
				},
				"proposedLatestRoundData()": {
					"notice": "Used if an aggregator contract has been proposed."
				},
				"transferOwnership(address)": {
					"notice": "Allows an owner to begin transferring ownership to a new address, pending."
				},
				"version()": {
					"notice": "the version number representing the type of aggregator the proxy points to."
				}
			},
			"notice": "This contract provides a consistent address for the CurrentAnwerInterface but delegates where it reads from to the owner, who is trusted to update it.",
			"version": 1
		}
	},
	"sources": {
		"dev/AggregatorProxy.sol": {
			"id": 2
		},
		"dev/ConfirmedOwner.sol": {
			"id": 3
		},
		"interfaces/AggregatorProxyInterface.sol": {
			"id": 12
		},
		"interfaces/AggregatorV2V3Interface.sol": {
			"id": 13
		},
		"interfaces/AggregatorInterface.sol": {
			"id": 11
		},
		"interfaces/AggregatorV3Interface.sol": {
			"id": 14
		}
	},
	"sourceCodes": {
		"dev/AggregatorProxy.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"./ConfirmedOwner.sol\";\nimport \"../interfaces/AggregatorProxyInterface.sol\";\n\n/**\n * @title A trusted proxy for updating where current answers are read from\n * @notice This contract provides a consistent address for the\n * CurrentAnwerInterface but delegates where it reads from to the owner, who is\n * trusted to update it.\n */\ncontract AggregatorProxy is AggregatorProxyInterface, ConfirmedOwner {\n\n  struct Phase {\n    uint16 id;\n    AggregatorProxyInterface aggregator;\n  }\n  AggregatorProxyInterface private s_proposedAggregator;\n  mapping(uint16 => AggregatorProxyInterface) private s_phaseAggregators;\n  Phase private s_currentPhase;\n  \n  uint256 constant private PHASE_OFFSET = 64;\n  uint256 constant private PHASE_SIZE = 16;\n  uint256 constant private MAX_ID = 2**(PHASE_OFFSET+PHASE_SIZE) - 1;\n\n  event AggregatorProposed(address indexed current, address indexed proposed);\n  event AggregatorConfirmed(address indexed previous, address indexed latest);\n\n  constructor(address aggregatorAddress) ConfirmedOwner(msg.sender) {\n    setAggregator(aggregatorAddress);\n  }\n\n  /**\n   * @notice Reads the current answer from aggregator delegated to.\n   *\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\n   * answer has been reached, it will simply return 0. Either wait to point to\n   * an already answered Aggregator or use the recommended latestRoundData\n   * instead which includes better verification information.\n   */\n  function latestAnswer()\n    public\n    view\n    virtual\n    override\n    returns (int256 answer)\n  {\n    return s_currentPhase.aggregator.latestAnswer();\n  }\n\n  /**\n   * @notice Reads the last updated height from aggregator delegated to.\n   *\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\n   * answer has been reached, it will simply return 0. Either wait to point to\n   * an already answered Aggregator or use the recommended latestRoundData\n   * instead which includes better verification information.\n   */\n  function latestTimestamp()\n    public\n    view\n    virtual\n    override\n    returns (uint256 updatedAt)\n  {\n    return s_currentPhase.aggregator.latestTimestamp();\n  }\n\n  /**\n   * @notice get past rounds answers\n   * @param roundId the answer number to retrieve the answer for\n   *\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\n   * answer has been reached, it will simply return 0. Either wait to point to\n   * an already answered Aggregator or use the recommended getRoundData\n   * instead which includes better verification information.\n   */\n  function getAnswer(uint256 roundId)\n    public\n    view\n    virtual\n    override\n    returns (int256 answer)\n  {\n    if (roundId > MAX_ID) return 0;\n\n    (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(roundId);\n    AggregatorProxyInterface aggregator = s_phaseAggregators[phaseId];\n    if (address(aggregator) == address(0)) return 0;\n\n    return aggregator.getAnswer(aggregatorRoundId);\n  }\n\n  /**\n   * @notice get block timestamp when an answer was last updated\n   * @param roundId the answer number to retrieve the updated timestamp for\n   *\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\n   * answer has been reached, it will simply return 0. Either wait to point to\n   * an already answered Aggregator or use the recommended getRoundData\n   * instead which includes better verification information.\n   */\n  function getTimestamp(uint256 roundId)\n    public\n    view\n    virtual\n    override\n    returns (uint256 updatedAt)\n  {\n    if (roundId > MAX_ID) return 0;\n\n    (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(roundId);\n    AggregatorProxyInterface aggregator = s_phaseAggregators[phaseId];\n    if (address(aggregator) == address(0)) return 0;\n\n    return aggregator.getTimestamp(aggregatorRoundId);\n  }\n\n  /**\n   * @notice get the latest completed round where the answer was updated. This\n   * ID includes the proxy's phase, to make sure round IDs increase even when\n   * switching to a newly deployed aggregator.\n   *\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\n   * answer has been reached, it will simply return 0. Either wait to point to\n   * an already answered Aggregator or use the recommended latestRoundData\n   * instead which includes better verification information.\n   */\n  function latestRound()\n    public\n    view\n    virtual\n    override\n    returns (uint256 roundId)\n  {\n    Phase memory phase = s_currentPhase; // cache storage reads\n    return addPhase(phase.id, uint64(phase.aggregator.latestRound()));\n  }\n\n  /**\n   * @notice get data about a round. Consumers are encouraged to check\n   * that they're receiving fresh data by inspecting the updatedAt and\n   * answeredInRound return values.\n   * Note that different underlying implementations of AggregatorV3Interface\n   * have slightly different semantics for some of the return values. Consumers\n   * should determine what implementations they expect to receive\n   * data from and validate that they can properly handle return data from all\n   * of them.\n   * @param roundId the requested round ID as presented through the proxy, this\n   * is made up of the aggregator's round ID with the phase ID encoded in the\n   * two highest order bytes\n   * @return id is the round ID from the aggregator for which the data was\n   * retrieved combined with an phase to ensure that round IDs get larger as\n   * time moves forward.\n   * @return answer is the answer for the given round\n   * @return startedAt is the timestamp when the round was started.\n   * (Only some AggregatorV3Interface implementations return meaningful values)\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\n   * answer was last computed)\n   * @return answeredInRound is the round ID of the round in which the answer\n   * was computed.\n   * (Only some AggregatorV3Interface implementations return meaningful values)\n   * @dev Note that answer and updatedAt may change between queries.\n   */\n  function getRoundData(uint80 roundId)\n    public\n    view\n    virtual\n    override\n    returns (\n      uint80 id,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(roundId);\n\n    (\n      id,\n      answer,\n      startedAt,\n      updatedAt,\n      answeredInRound\n    ) = s_phaseAggregators[phaseId].getRoundData(aggregatorRoundId);\n\n    return addPhaseIds(id, answer, startedAt, updatedAt, answeredInRound, phaseId);\n  }\n\n  /**\n   * @notice get data about the latest round. Consumers are encouraged to check\n   * that they're receiving fresh data by inspecting the updatedAt and\n   * answeredInRound return values.\n   * Note that different underlying implementations of AggregatorV3Interface\n   * have slightly different semantics for some of the return values. Consumers\n   * should determine what implementations they expect to receive\n   * data from and validate that they can properly handle return data from all\n   * of them.\n   * @return id is the round ID from the aggregator for which the data was\n   * retrieved combined with an phase to ensure that round IDs get larger as\n   * time moves forward.\n   * @return answer is the answer for the given round\n   * @return startedAt is the timestamp when the round was started.\n   * (Only some AggregatorV3Interface implementations return meaningful values)\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\n   * answer was last computed)\n   * @return answeredInRound is the round ID of the round in which the answer\n   * was computed.\n   * (Only some AggregatorV3Interface implementations return meaningful values)\n   * @dev Note that answer and updatedAt may change between queries.\n   */\n  function latestRoundData()\n    public\n    view\n    virtual\n    override\n    returns (\n      uint80 id,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    Phase memory current = s_currentPhase; // cache storage reads\n\n    (\n      id,\n      answer,\n      startedAt,\n      updatedAt,\n      answeredInRound\n    ) = current.aggregator.latestRoundData();\n\n    return addPhaseIds(id, answer, startedAt, updatedAt, answeredInRound, current.id);\n  }\n\n  /**\n   * @notice Used if an aggregator contract has been proposed.\n   * @param roundId the round ID to retrieve the round data for\n   * @return id is the round ID for which data was retrieved\n   * @return answer is the answer for the given round\n   * @return startedAt is the timestamp when the round was started.\n   * (Only some AggregatorV3Interface implementations return meaningful values)\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\n   * answer was last computed)\n   * @return answeredInRound is the round ID of the round in which the answer\n   * was computed.\n  */\n  function proposedGetRoundData(uint80 roundId)\n    external\n    view\n    virtual\n    override\n    hasProposal()\n    returns (\n      uint80 id,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    return s_proposedAggregator.getRoundData(roundId);\n  }\n\n  /**\n   * @notice Used if an aggregator contract has been proposed.\n   * @return id is the round ID for which data was retrieved\n   * @return answer is the answer for the given round\n   * @return startedAt is the timestamp when the round was started.\n   * (Only some AggregatorV3Interface implementations return meaningful values)\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\n   * answer was last computed)\n   * @return answeredInRound is the round ID of the round in which the answer\n   * was computed.\n  */\n  function proposedLatestRoundData()\n    external\n    view\n    virtual\n    override\n    hasProposal()\n    returns (\n      uint80 id,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    return s_proposedAggregator.latestRoundData();\n  }\n\n  /**\n   * @notice returns the current phase's aggregator address.\n   */\n  function aggregator()\n    external\n    view\n    override\n    returns (address)\n  {\n    return address(s_currentPhase.aggregator);\n  }\n\n  /**\n   * @notice returns the current phase's ID.\n   */\n  function phaseId()\n    external\n    view\n    override\n    returns (uint16)\n  {\n    return s_currentPhase.id;\n  }\n\n  /**\n   * @notice represents the number of decimals the aggregator responses represent.\n   */\n  function decimals()\n    external\n    view\n    override\n    returns (uint8)\n  {\n    return s_currentPhase.aggregator.decimals();\n  }\n\n  /**\n   * @notice the version number representing the type of aggregator the proxy\n   * points to.\n   */\n  function version()\n    external\n    view\n    override\n    returns (uint256)\n  {\n    return s_currentPhase.aggregator.version();\n  }\n\n  /**\n   * @notice returns the description of the aggregator the proxy points to.\n   */\n  function description()\n    external\n    view\n    override\n    returns (string memory)\n  {\n    return s_currentPhase.aggregator.description();\n  }\n\n  /**\n   * @notice returns the current proposed aggregator\n   */\n  function proposedAggregator()\n    external\n    view\n    override\n    returns (address)\n  {\n    return address(s_proposedAggregator);\n  }\n\n  /**\n   * @notice return a phase aggregator using the phaseId\n   *\n   * @param phaseId uint16\n   */\n  function phaseAggregators(uint16 phaseId)\n    external\n    view\n    override\n    returns (address)\n  {\n    return address(s_phaseAggregators[phaseId]);\n  }\n\n  /**\n   * @notice Allows the owner to propose a new address for the aggregator\n   * @param aggregatorAddress The new address for the aggregator contract\n   */\n  function proposeAggregator(address aggregatorAddress)\n    external\n    onlyOwner()\n  {\n    s_proposedAggregator = AggregatorProxyInterface(aggregatorAddress);\n    emit AggregatorProposed(address(s_currentPhase.aggregator), aggregatorAddress);\n  }\n\n  /**\n   * @notice Allows the owner to confirm and change the address\n   * to the proposed aggregator\n   * @dev Reverts if the given address doesn't match what was previously\n   * proposed\n   * @param aggregatorAddress The new address for the aggregator contract\n   */\n  function confirmAggregator(address aggregatorAddress)\n    external\n    onlyOwner()\n  {\n    require(aggregatorAddress == address(s_proposedAggregator), \"Invalid proposed aggregator\");\n    address previousAggregator = address(s_currentPhase.aggregator);\n    delete s_proposedAggregator;\n    setAggregator(aggregatorAddress);\n    emit AggregatorConfirmed(previousAggregator, aggregatorAddress);\n  }\n\n\n  /*\n   * Internal\n   */\n\n  function setAggregator(address aggregatorAddress)\n    internal\n  {\n    uint16 id = s_currentPhase.id + 1;\n    s_currentPhase = Phase(id, AggregatorProxyInterface(aggregatorAddress));\n    s_phaseAggregators[id] = AggregatorProxyInterface(aggregatorAddress);\n  }\n\n  function addPhase(\n    uint16 phase,\n    uint64 originalId\n  )\n    internal\n    pure\n    returns (uint80)\n  {\n    return uint80(uint256(phase) << PHASE_OFFSET | originalId);\n  }\n\n  function parseIds(\n    uint256 roundId\n  )\n    internal\n    pure\n    returns (uint16, uint64)\n  {\n    uint16 phaseId = uint16(roundId >> PHASE_OFFSET);\n    uint64 aggregatorRoundId = uint64(roundId);\n\n    return (phaseId, aggregatorRoundId);\n  }\n\n  function addPhaseIds(\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound,\n      uint16 phaseId\n  )\n    internal\n    pure\n    returns (uint80, int256, uint256, uint256, uint80)\n  {\n    return (\n      addPhase(phaseId, uint64(roundId)),\n      answer,\n      startedAt,\n      updatedAt,\n      addPhase(phaseId, uint64(answeredInRound))\n    );\n  }\n\n  /*\n   * Modifiers\n   */\n\n  modifier hasProposal() {\n    require(address(s_proposedAggregator) != address(0), \"No proposed aggregator present\");\n    _;\n  }\n\n}\n",
		"dev/ConfirmedOwner.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\n/**\n * @title The ConfirmedOwner contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract ConfirmedOwner {\n\n  address private s_owner;\n  address private s_pendingOwner;\n\n  event OwnershipTransferRequested(\n    address indexed from,\n    address indexed to\n  );\n  event OwnershipTransferred(\n    address indexed from,\n    address indexed to\n  );\n\n  constructor(address newOwner) {\n    s_owner = newOwner;\n  }\n\n  /**\n   * @notice Allows an owner to begin transferring ownership to a new address,\n   * pending.\n   */\n  function transferOwnership(address to)\n    external\n    onlyOwner()\n  {\n    require(to != msg.sender, \"Cannot transfer to self\");\n\n    s_pendingOwner = to;\n\n    emit OwnershipTransferRequested(s_owner, to);\n  }\n\n  /**\n   * @notice Allows an ownership transfer to be completed by the recipient.\n   */\n  function acceptOwnership()\n    external\n  {\n    require(msg.sender == s_pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = s_owner;\n    s_owner = msg.sender;\n    s_pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /**\n   * @notice Get the current owner\n   */\n  function owner() public view returns (address) {\n    return s_owner;\n  }\n\n  /**\n   * @notice Reverts if called by anyone other than the contract owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == s_owner, \"Only callable by owner\");\n    _;\n  }\n\n}\n",
		"interfaces/AggregatorProxyInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\nimport \"./AggregatorV2V3Interface.sol\";\n\ninterface AggregatorProxyInterface is AggregatorV2V3Interface {\n\tfunction phaseAggregators(uint16 phaseId) external view returns (address);\n\tfunction phaseId() external view returns (uint16);\n\tfunction proposedAggregator() external view returns (address);\n\tfunction proposedGetRoundData(uint80 roundId) external view returns (uint80 id, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\tfunction proposedLatestRoundData() external view returns (uint80 id, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\tfunction aggregator() external view returns (address);\n}\n",
		"interfaces/AggregatorV2V3Interface.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\nimport \"./AggregatorInterface.sol\";\nimport \"./AggregatorV3Interface.sol\";\n\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\n{\n}\n",
		"interfaces/AggregatorInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n  function latestTimestamp() external view returns (uint256);\n  function latestRound() external view returns (uint256);\n  function getAnswer(uint256 roundId) external view returns (int256);\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n",
		"interfaces/AggregatorV3Interface.sol": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\ninterface AggregatorV3Interface {\n\n  function decimals() external view returns (uint8);\n  function description() external view returns (string memory);\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n"
	},
	"sourceTreeHashHex": "0x7a01ec7bfed9d39a99d497d20c38328c769fff6b3d825bc860d381cd3c3e7165",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.7.0+commit.9e61f92b.js",
		"settings": {
			"optimizer": {
				"runs": 1000000,
				"enabled": true
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"userdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap",
						"evm.methodIdentifiers",
						"metadata"
					]
				}
			},
			"remappings": []
		}
	},
	"chains": {}
}
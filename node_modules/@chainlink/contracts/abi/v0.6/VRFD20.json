{
	"schemaVersion": "2.0.0",
	"contractName": "VRFD20",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "vrfCoordinator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "link",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "keyHash",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "fee",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "requestId",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"name": "DiceLanded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "requestId",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "roller",
						"type": "address"
					}
				],
				"name": "DiceRolled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "acceptOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "fee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "player",
						"type": "address"
					}
				],
				"name": "house",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "keyHash",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "requestId",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "randomness",
						"type": "uint256"
					}
				],
				"name": "rawFulfillRandomness",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "userProvidedSeed",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "roller",
						"type": "address"
					}
				],
				"name": "rollDice",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "requestId",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "fee",
						"type": "uint256"
					}
				],
				"name": "setFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "keyHash",
						"type": "bytes32"
					}
				],
				"name": "setKeyHash",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "withdrawLINK",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "This is only an example implementation and not necessarily suitable for mainnet.",
			"methods": {
				"acceptOwnership()": {
					"details": "Allows an ownership transfer to be completed by the recipient."
				},
				"constructor": {
					"details": "NETWORK: KOVANChainlink VRF Coordinator address: 0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9LINK token address:                0xa36085F69e2889c224210F603D836748e7dC0088Key Hash:   0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4Fee:        0.1 LINK (100000000000000000)",
					"params": {
						"fee": "uint256 fee to pay the VRF oracle",
						"keyHash": "bytes32 representing the hash of the VRF job",
						"link": "address of the LINK token",
						"vrfCoordinator": "address of the VRF Coordinator"
					}
				},
				"house(address)": {
					"params": {
						"player": "address"
					},
					"returns": {
						"_0": "house as a string"
					}
				},
				"rollDice(uint256,address)": {
					"details": "Warning: if the VRF response is delayed, avoid calling requestRandomness repeatedly as that would give miners/VRF operators latitude about which VRF response arrives first.You must review your implementation details with extreme care.",
					"params": {
						"roller": "address of the roller",
						"userProvidedSeed": "uint256 unpredictable seed"
					}
				},
				"setFee(uint256)": {
					"params": {
						"fee": "uint256"
					}
				},
				"setKeyHash(bytes32)": {
					"params": {
						"keyHash": "bytes32"
					}
				},
				"transferOwnership(address)": {
					"details": "Allows an owner to begin transferring ownership to a new address, pending."
				},
				"withdrawLINK(address,uint256)": {
					"details": "this is an example only, and in a real contract withdrawals should happen according to the established withdrawal pattern:  https://docs.soliditylang.org/en/v0.4.24/common-patterns.html#withdrawal-from-contracts",
					"params": {
						"to": "the address to withdraw LINK to",
						"value": "the amount of LINK to withdraw"
					}
				}
			}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x60c060405234801561001057600080fd5b506040516116d73803806116d78339818101604052608081101561003357600080fd5b508051602082015160408301516060938401516001600160601b031993851b841660a0529190931b909116608052600180546001600160a01b0319163317905560039190915560045560805160601c60a05160601c6116236100b4600039806107945280610d1e52508061036352806108b65280610ce252506116236000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c806394985ddd11610081578063b1cad5e31161005b578063b1cad5e3146101f2578063ddca3f431461029a578063f2fde38b146102a2576100c9565b806394985ddd14610179578063983fbab21461019c57806398544710146101d5576100c9565b806369fe0e2d116100b257806369fe0e2d1461012157806379ba5097146101405780638da5cb5b14610148576100c9565b80635e816740146100ce57806361728f3914610119575b600080fd5b610107600480360360408110156100e457600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff166102d5565b60408051918252519081900360200190f35b6101076105c9565b61013e6004803603602081101561013757600080fd5b50356105cf565b005b61013e61065a565b610150610760565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61013e6004803603604081101561018f57600080fd5b508035906020013561077c565b61013e600480360360408110156101b257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561082e565b61013e600480360360208110156101eb57600080fd5b50356109f2565b6102256004803603602081101561020857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a7d565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561025f578181015183820152602001610247565b50505050905090810190601f16801561028c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610107610bdb565b61013e600480360360208110156102b857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610be1565b60015460009073ffffffffffffffffffffffffffffffffffffffff16331461035e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b6004547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156103fe57600080fd5b505afa158015610412573d6000803e3d6000fd5b505050506040513d602081101561042857600080fd5b5051101561049757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4e6f7420656e6f756768204c494e4b20746f2070617920666565000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600660205260409020541561052957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f416c726561647920726f6c6c6564000000000000000000000000000000000000604482015290519081900360640190fd5b61053860035460045485610cde565b600081815260056020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff88169081179091558084526006909252808320602a9055519293509183917f923de4fc4aece24a78a9e4ca3009c571a742f81ac2c004a229224b0fd1883bdd91a392915050565b60035490565b60015473ffffffffffffffffffffffffffffffffffffffff16331461065557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b600455565b60025473ffffffffffffffffffffffffffffffffffffffff1633146106e057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000008082163390811790935560028054909116905560405173ffffffffffffffffffffffffffffffffffffffff909116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461082057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00604482015290519081900360640190fd5b61082a8282610ec7565b5050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146108b457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561095b57600080fd5b505af115801561096f573d6000803e3d6000fd5b505050506040513d602081101561098557600080fd5b505161082a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420656e6f756768204c494e4b0000000000000000000000000000000000604482015290519081900360640190fd5b60015473ffffffffffffffffffffffffffffffffffffffff163314610a7857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b600355565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260066020526040902054606090610b1157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f44696365206e6f7420726f6c6c65640000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260066020526040902054602a1415610ba657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f526f6c6c20696e2070726f677265737300000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260066020526040902054610bd590610f50565b92915050565b60045490565b60015473ffffffffffffffffffffffffffffffffffffffff163314610c6757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff838116918217909255600154604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127890600090a350565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f000000000000000000000000000000000000000000000000000000000000000085878660405160200180838152602001828152602001925050506040516020818303038152906040526040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610dea578181015183820152602001610dd2565b50505050905090810190601f168015610e175780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015610e3857600080fd5b505af1158015610e4c573d6000803e3d6000fd5b505050506040513d6020811015610e6257600080fd5b5050600084815260208190526040812054610e82908690859030906113d4565b600086815260208190526040902054909150610ea590600163ffffffff61142816565b600086815260208190526040902055610ebe85826114a3565b95945050505050565b6000610eeb6001610edf84601463ffffffff6114cf16565b9063ffffffff61142816565b60008481526005602090815260408083205473ffffffffffffffffffffffffffffffffffffffff168352600690915280822083905551919250829185917f909dd726737b7ffa4ae9d137e9edebe8a74a9c2910a4b60e8112f93ab217083791a3505050565b6060610f5a6115c5565b50604080516102c081018252600961028082018181527f54617267617279656e00000000000000000000000000000000000000000000006102a08401528252825180840184528181527f4c616e6e69737465720000000000000000000000000000000000000000000000602082810191909152808401919091528351808501855260058082527f537461726b00000000000000000000000000000000000000000000000000000082840152848601919091528451808601865260068082527f547972656c6c0000000000000000000000000000000000000000000000000000828501526060860191909152855180870187529384527f426172617468656f6e00000000000000000000000000000000000000000000008484015260808501939093528451808601865260078082527f4d617274656c6c000000000000000000000000000000000000000000000000008285015260a0860191909152855180870187528281527f54756c6c790000000000000000000000000000000000000000000000000000008185015260c0860152855180870187528481527f426f6c746f6e00000000000000000000000000000000000000000000000000008185015260e0860152855180870187528181527f477265796a6f790000000000000000000000000000000000000000000000000081850152610100860152855180870187528281527f417272796e0000000000000000000000000000000000000000000000000000008185015261012086015285518087018752600481527f467265790000000000000000000000000000000000000000000000000000000081850152610140860152855180870187528181527f4d6f726d6f6e740000000000000000000000000000000000000000000000000081850152610160860152855180870187528481527f5461726c6579000000000000000000000000000000000000000000000000000081850152610180860152855180870187528281527f4461796e65000000000000000000000000000000000000000000000000000000818501526101a0860152855180870187529182527f556d626572000000000000000000000000000000000000000000000000000000828401526101c08501919091528451808601865260088082527f56616c6572796f6e000000000000000000000000000000000000000000000000828501526101e0860191909152855180870187528181527f4d616e6465726c7900000000000000000000000000000000000000000000000081850152610200860152855180870187529182527f436c6567616e650000000000000000000000000000000000000000000000000082840152610220850191909152845180860186529283527f476c6f76657200000000000000000000000000000000000000000000000000008383015261024084019290925283518085019094529083527f4b6172737461726b00000000000000000000000000000000000000000000000090830152610260810191909152806113be84600163ffffffff61154e16565b601481106113c857fe5b60200201519392505050565b604080516020808201969096528082019490945273ffffffffffffffffffffffffffffffffffffffff9290921660608401526080808401919091528151808403909101815260a09092019052805191012090565b60008282018381101561149c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b60008161153d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000604482015290519081900360640190fd5b81838161154657fe5b069392505050565b6000828211156115bf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6040518061028001604052806014905b60608152602001906001900390816115d5579050509056fea2646970667358221220b5ecf454cb25d6780b51df1f9f74d18b4f13d55cdfc78e913b1776c4f2b2966864736f6c63430006060033",
				"opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x16D7 CODESIZE SUB DUP1 PUSH2 0x16D7 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 SWAP4 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT SWAP4 DUP6 SHL DUP5 AND PUSH1 0xA0 MSTORE SWAP2 SWAP1 SWAP4 SHL SWAP1 SWAP2 AND PUSH1 0x80 MSTORE PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH1 0x3 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x4 SSTORE PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH2 0x1623 PUSH2 0xB4 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x794 MSTORE DUP1 PUSH2 0xD1E MSTORE POP DUP1 PUSH2 0x363 MSTORE DUP1 PUSH2 0x8B6 MSTORE DUP1 PUSH2 0xCE2 MSTORE POP PUSH2 0x1623 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x94985DDD GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xB1CAD5E3 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xB1CAD5E3 EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0xDDCA3F43 EQ PUSH2 0x29A JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2A2 JUMPI PUSH2 0xC9 JUMP JUMPDEST DUP1 PUSH4 0x94985DDD EQ PUSH2 0x179 JUMPI DUP1 PUSH4 0x983FBAB2 EQ PUSH2 0x19C JUMPI DUP1 PUSH4 0x98544710 EQ PUSH2 0x1D5 JUMPI PUSH2 0xC9 JUMP JUMPDEST DUP1 PUSH4 0x69FE0E2D GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x69FE0E2D EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x140 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x148 JUMPI PUSH2 0xC9 JUMP JUMPDEST DUP1 PUSH4 0x5E816740 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x61728F39 EQ PUSH2 0x119 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x107 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2D5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x107 PUSH2 0x5C9 JUMP JUMPDEST PUSH2 0x13E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x137 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x5CF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x13E PUSH2 0x65A JUMP JUMPDEST PUSH2 0x150 PUSH2 0x760 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x13E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x18F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x77C JUMP JUMPDEST PUSH2 0x13E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x82E JUMP JUMPDEST PUSH2 0x13E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x9F2 JUMP JUMPDEST PUSH2 0x225 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x208 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA7D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x247 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x28C JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x107 PUSH2 0xBDB JUMP JUMPDEST PUSH2 0x13E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xBE1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x35E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x412 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x428 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD LT ISZERO PUSH2 0x497 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F756768204C494E4B20746F2070617920666565000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x529 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416C726561647920726F6C6C6564000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x538 PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD DUP6 PUSH2 0xCDE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP1 DUP5 MSTORE PUSH1 0x6 SWAP1 SWAP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x2A SWAP1 SSTORE MLOAD SWAP3 SWAP4 POP SWAP2 DUP4 SWAP2 PUSH32 0x923DE4FC4AECE24A78A9E4CA3009C571A742F81AC2C004A229224B0FD1883BDD SWAP2 LOG3 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x655 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x6E0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP1 DUP3 AND CALLER SWAP1 DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x820 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C7920565246436F6F7264696E61746F722063616E2066756C66696C6C00 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x82A DUP3 DUP3 PUSH2 0xEC7 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x8B4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x95B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x96F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x985 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x82A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F756768204C494E4B0000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xA78 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x3 SSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x60 SWAP1 PUSH2 0xB11 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x44696365206E6F7420726F6C6C65640000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x2A EQ ISZERO PUSH2 0xBA6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526F6C6C20696E2070726F677265737300000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xBD5 SWAP1 PUSH2 0xF50 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xC67 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 AND SWAP1 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x4000AEA0 PUSH32 0x0 DUP6 DUP8 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xDEA JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xDD2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xE17 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE4C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xE62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0xE82 SWAP1 DUP7 SWAP1 DUP6 SWAP1 ADDRESS SWAP1 PUSH2 0x13D4 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0xEA5 SWAP1 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x1428 AND JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0xEBE DUP6 DUP3 PUSH2 0x14A3 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEEB PUSH1 0x1 PUSH2 0xEDF DUP5 PUSH1 0x14 PUSH4 0xFFFFFFFF PUSH2 0x14CF AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1428 AND JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0x6 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP4 SWAP1 SSTORE MLOAD SWAP2 SWAP3 POP DUP3 SWAP2 DUP6 SWAP2 PUSH32 0x909DD726737B7FFA4AE9D137E9EDEBE8A74A9C2910A4B60E8112F93AB2170837 SWAP2 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF5A PUSH2 0x15C5 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x2C0 DUP2 ADD DUP3 MSTORE PUSH1 0x9 PUSH2 0x280 DUP3 ADD DUP2 DUP2 MSTORE PUSH32 0x54617267617279656E0000000000000000000000000000000000000000000000 PUSH2 0x2A0 DUP5 ADD MSTORE DUP3 MSTORE DUP3 MLOAD DUP1 DUP5 ADD DUP5 MSTORE DUP2 DUP2 MSTORE PUSH32 0x4C616E6E69737465720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP6 ADD DUP6 MSTORE PUSH1 0x5 DUP1 DUP3 MSTORE PUSH32 0x537461726B000000000000000000000000000000000000000000000000000000 DUP3 DUP5 ADD MSTORE DUP5 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 MLOAD DUP1 DUP7 ADD DUP7 MSTORE PUSH1 0x6 DUP1 DUP3 MSTORE PUSH32 0x547972656C6C0000000000000000000000000000000000000000000000000000 DUP3 DUP6 ADD MSTORE PUSH1 0x60 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE SWAP4 DUP5 MSTORE PUSH32 0x426172617468656F6E0000000000000000000000000000000000000000000000 DUP5 DUP5 ADD MSTORE PUSH1 0x80 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP5 MLOAD DUP1 DUP7 ADD DUP7 MSTORE PUSH1 0x7 DUP1 DUP3 MSTORE PUSH32 0x4D617274656C6C00000000000000000000000000000000000000000000000000 DUP3 DUP6 ADD MSTORE PUSH1 0xA0 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE DUP3 DUP2 MSTORE PUSH32 0x54756C6C79000000000000000000000000000000000000000000000000000000 DUP2 DUP6 ADD MSTORE PUSH1 0xC0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE DUP5 DUP2 MSTORE PUSH32 0x426F6C746F6E0000000000000000000000000000000000000000000000000000 DUP2 DUP6 ADD MSTORE PUSH1 0xE0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE DUP2 DUP2 MSTORE PUSH32 0x477265796A6F7900000000000000000000000000000000000000000000000000 DUP2 DUP6 ADD MSTORE PUSH2 0x100 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE DUP3 DUP2 MSTORE PUSH32 0x417272796E000000000000000000000000000000000000000000000000000000 DUP2 DUP6 ADD MSTORE PUSH2 0x120 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0x4672657900000000000000000000000000000000000000000000000000000000 DUP2 DUP6 ADD MSTORE PUSH2 0x140 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE DUP2 DUP2 MSTORE PUSH32 0x4D6F726D6F6E7400000000000000000000000000000000000000000000000000 DUP2 DUP6 ADD MSTORE PUSH2 0x160 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE DUP5 DUP2 MSTORE PUSH32 0x5461726C65790000000000000000000000000000000000000000000000000000 DUP2 DUP6 ADD MSTORE PUSH2 0x180 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE DUP3 DUP2 MSTORE PUSH32 0x4461796E65000000000000000000000000000000000000000000000000000000 DUP2 DUP6 ADD MSTORE PUSH2 0x1A0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE SWAP2 DUP3 MSTORE PUSH32 0x556D626572000000000000000000000000000000000000000000000000000000 DUP3 DUP5 ADD MSTORE PUSH2 0x1C0 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 MLOAD DUP1 DUP7 ADD DUP7 MSTORE PUSH1 0x8 DUP1 DUP3 MSTORE PUSH32 0x56616C6572796F6E000000000000000000000000000000000000000000000000 DUP3 DUP6 ADD MSTORE PUSH2 0x1E0 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE DUP2 DUP2 MSTORE PUSH32 0x4D616E6465726C79000000000000000000000000000000000000000000000000 DUP2 DUP6 ADD MSTORE PUSH2 0x200 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE SWAP2 DUP3 MSTORE PUSH32 0x436C6567616E6500000000000000000000000000000000000000000000000000 DUP3 DUP5 ADD MSTORE PUSH2 0x220 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 MLOAD DUP1 DUP7 ADD DUP7 MSTORE SWAP3 DUP4 MSTORE PUSH32 0x476C6F7665720000000000000000000000000000000000000000000000000000 DUP4 DUP4 ADD MSTORE PUSH2 0x240 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE SWAP1 DUP4 MSTORE PUSH32 0x4B6172737461726B000000000000000000000000000000000000000000000000 SWAP1 DUP4 ADD MSTORE PUSH2 0x260 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 PUSH2 0x13BE DUP5 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x154E AND JUMP JUMPDEST PUSH1 0x14 DUP2 LT PUSH2 0x13C8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD SWAP7 SWAP1 SWAP7 MSTORE DUP1 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xA0 SWAP1 SWAP3 ADD SWAP1 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x149C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP1 MLOAD DUP1 DUP4 SUB DUP3 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP3 ADD SWAP1 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x153D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206D6F64756C6F206279207A65726F0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x1546 JUMPI INVALID JUMPDEST MOD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x15BF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x280 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x14 SWAP1 JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x15D5 JUMPI SWAP1 POP POP SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB5 0xEC DELEGATECALL SLOAD 0xCB 0x25 0xD6 PUSH25 0xB51DF1F9F74D18B4F13D55CDFC78E913B1776C4F2B2966864 PUSH20 0x6F6C634300060600330000000000000000000000 ",
				"sourceMap": "310:5735:26:-:0;;;1427:211;5:9:-1;2:2;;;27:1;24;17:12;2:2;1427:211:26;;;;;;;;;;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;1427:211:26;;;;;;;;;;;;;;;-1:-1:-1;;;;;;8998:32:22;;;;;;;9036;;;;;;;1427:211:26;9036:32:22;438:5:13;:18;;-1:-1:-1;;;;;;438:18:13;446:10;438:18;;;1582:9:26::1;:19:::0;;;;1611:5:::1;:11:::0;310:5735;;;;;;;;;;;;;;;;"
			},
			"deployedBytecode": {
				"immutableReferences": {
					"9438": [
						{
							"length": 32,
							"start": 867
						},
						{
							"length": 32,
							"start": 2230
						},
						{
							"length": 32,
							"start": 3298
						}
					],
					"9440": [
						{
							"length": 32,
							"start": 1940
						},
						{
							"length": 32,
							"start": 3358
						}
					]
				},
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c806394985ddd11610081578063b1cad5e31161005b578063b1cad5e3146101f2578063ddca3f431461029a578063f2fde38b146102a2576100c9565b806394985ddd14610179578063983fbab21461019c57806398544710146101d5576100c9565b806369fe0e2d116100b257806369fe0e2d1461012157806379ba5097146101405780638da5cb5b14610148576100c9565b80635e816740146100ce57806361728f3914610119575b600080fd5b610107600480360360408110156100e457600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff166102d5565b60408051918252519081900360200190f35b6101076105c9565b61013e6004803603602081101561013757600080fd5b50356105cf565b005b61013e61065a565b610150610760565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61013e6004803603604081101561018f57600080fd5b508035906020013561077c565b61013e600480360360408110156101b257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561082e565b61013e600480360360208110156101eb57600080fd5b50356109f2565b6102256004803603602081101561020857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a7d565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561025f578181015183820152602001610247565b50505050905090810190601f16801561028c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610107610bdb565b61013e600480360360208110156102b857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610be1565b60015460009073ffffffffffffffffffffffffffffffffffffffff16331461035e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b6004547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156103fe57600080fd5b505afa158015610412573d6000803e3d6000fd5b505050506040513d602081101561042857600080fd5b5051101561049757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4e6f7420656e6f756768204c494e4b20746f2070617920666565000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600660205260409020541561052957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f416c726561647920726f6c6c6564000000000000000000000000000000000000604482015290519081900360640190fd5b61053860035460045485610cde565b600081815260056020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff88169081179091558084526006909252808320602a9055519293509183917f923de4fc4aece24a78a9e4ca3009c571a742f81ac2c004a229224b0fd1883bdd91a392915050565b60035490565b60015473ffffffffffffffffffffffffffffffffffffffff16331461065557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b600455565b60025473ffffffffffffffffffffffffffffffffffffffff1633146106e057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000008082163390811790935560028054909116905560405173ffffffffffffffffffffffffffffffffffffffff909116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461082057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00604482015290519081900360640190fd5b61082a8282610ec7565b5050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146108b457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561095b57600080fd5b505af115801561096f573d6000803e3d6000fd5b505050506040513d602081101561098557600080fd5b505161082a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420656e6f756768204c494e4b0000000000000000000000000000000000604482015290519081900360640190fd5b60015473ffffffffffffffffffffffffffffffffffffffff163314610a7857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b600355565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260066020526040902054606090610b1157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f44696365206e6f7420726f6c6c65640000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260066020526040902054602a1415610ba657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f526f6c6c20696e2070726f677265737300000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260066020526040902054610bd590610f50565b92915050565b60045490565b60015473ffffffffffffffffffffffffffffffffffffffff163314610c6757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff838116918217909255600154604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127890600090a350565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f000000000000000000000000000000000000000000000000000000000000000085878660405160200180838152602001828152602001925050506040516020818303038152906040526040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610dea578181015183820152602001610dd2565b50505050905090810190601f168015610e175780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015610e3857600080fd5b505af1158015610e4c573d6000803e3d6000fd5b505050506040513d6020811015610e6257600080fd5b5050600084815260208190526040812054610e82908690859030906113d4565b600086815260208190526040902054909150610ea590600163ffffffff61142816565b600086815260208190526040902055610ebe85826114a3565b95945050505050565b6000610eeb6001610edf84601463ffffffff6114cf16565b9063ffffffff61142816565b60008481526005602090815260408083205473ffffffffffffffffffffffffffffffffffffffff168352600690915280822083905551919250829185917f909dd726737b7ffa4ae9d137e9edebe8a74a9c2910a4b60e8112f93ab217083791a3505050565b6060610f5a6115c5565b50604080516102c081018252600961028082018181527f54617267617279656e00000000000000000000000000000000000000000000006102a08401528252825180840184528181527f4c616e6e69737465720000000000000000000000000000000000000000000000602082810191909152808401919091528351808501855260058082527f537461726b00000000000000000000000000000000000000000000000000000082840152848601919091528451808601865260068082527f547972656c6c0000000000000000000000000000000000000000000000000000828501526060860191909152855180870187529384527f426172617468656f6e00000000000000000000000000000000000000000000008484015260808501939093528451808601865260078082527f4d617274656c6c000000000000000000000000000000000000000000000000008285015260a0860191909152855180870187528281527f54756c6c790000000000000000000000000000000000000000000000000000008185015260c0860152855180870187528481527f426f6c746f6e00000000000000000000000000000000000000000000000000008185015260e0860152855180870187528181527f477265796a6f790000000000000000000000000000000000000000000000000081850152610100860152855180870187528281527f417272796e0000000000000000000000000000000000000000000000000000008185015261012086015285518087018752600481527f467265790000000000000000000000000000000000000000000000000000000081850152610140860152855180870187528181527f4d6f726d6f6e740000000000000000000000000000000000000000000000000081850152610160860152855180870187528481527f5461726c6579000000000000000000000000000000000000000000000000000081850152610180860152855180870187528281527f4461796e65000000000000000000000000000000000000000000000000000000818501526101a0860152855180870187529182527f556d626572000000000000000000000000000000000000000000000000000000828401526101c08501919091528451808601865260088082527f56616c6572796f6e000000000000000000000000000000000000000000000000828501526101e0860191909152855180870187528181527f4d616e6465726c7900000000000000000000000000000000000000000000000081850152610200860152855180870187529182527f436c6567616e650000000000000000000000000000000000000000000000000082840152610220850191909152845180860186529283527f476c6f76657200000000000000000000000000000000000000000000000000008383015261024084019290925283518085019094529083527f4b6172737461726b00000000000000000000000000000000000000000000000090830152610260810191909152806113be84600163ffffffff61154e16565b601481106113c857fe5b60200201519392505050565b604080516020808201969096528082019490945273ffffffffffffffffffffffffffffffffffffffff9290921660608401526080808401919091528151808403909101815260a09092019052805191012090565b60008282018381101561149c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b60008161153d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000604482015290519081900360640190fd5b81838161154657fe5b069392505050565b6000828211156115bf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6040518061028001604052806014905b60608152602001906001900390816115d5579050509056fea2646970667358221220b5ecf454cb25d6780b51df1f9f74d18b4f13d55cdfc78e913b1776c4f2b2966864736f6c63430006060033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x94985DDD GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xB1CAD5E3 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xB1CAD5E3 EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0xDDCA3F43 EQ PUSH2 0x29A JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2A2 JUMPI PUSH2 0xC9 JUMP JUMPDEST DUP1 PUSH4 0x94985DDD EQ PUSH2 0x179 JUMPI DUP1 PUSH4 0x983FBAB2 EQ PUSH2 0x19C JUMPI DUP1 PUSH4 0x98544710 EQ PUSH2 0x1D5 JUMPI PUSH2 0xC9 JUMP JUMPDEST DUP1 PUSH4 0x69FE0E2D GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x69FE0E2D EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x140 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x148 JUMPI PUSH2 0xC9 JUMP JUMPDEST DUP1 PUSH4 0x5E816740 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x61728F39 EQ PUSH2 0x119 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x107 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2D5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x107 PUSH2 0x5C9 JUMP JUMPDEST PUSH2 0x13E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x137 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x5CF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x13E PUSH2 0x65A JUMP JUMPDEST PUSH2 0x150 PUSH2 0x760 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x13E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x18F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x77C JUMP JUMPDEST PUSH2 0x13E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x82E JUMP JUMPDEST PUSH2 0x13E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x9F2 JUMP JUMPDEST PUSH2 0x225 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x208 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA7D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x247 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x28C JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x107 PUSH2 0xBDB JUMP JUMPDEST PUSH2 0x13E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xBE1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x35E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x412 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x428 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD LT ISZERO PUSH2 0x497 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F756768204C494E4B20746F2070617920666565000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x529 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416C726561647920726F6C6C6564000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x538 PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD DUP6 PUSH2 0xCDE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP1 DUP5 MSTORE PUSH1 0x6 SWAP1 SWAP3 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x2A SWAP1 SSTORE MLOAD SWAP3 SWAP4 POP SWAP2 DUP4 SWAP2 PUSH32 0x923DE4FC4AECE24A78A9E4CA3009C571A742F81AC2C004A229224B0FD1883BDD SWAP2 LOG3 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x655 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x6E0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP1 DUP3 AND CALLER SWAP1 DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x820 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C7920565246436F6F7264696E61746F722063616E2066756C66696C6C00 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x82A DUP3 DUP3 PUSH2 0xEC7 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x8B4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x95B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x96F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x985 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x82A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F756768204C494E4B0000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xA78 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x3 SSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x60 SWAP1 PUSH2 0xB11 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x44696365206E6F7420726F6C6C65640000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x2A EQ ISZERO PUSH2 0xBA6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526F6C6C20696E2070726F677265737300000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xBD5 SWAP1 PUSH2 0xF50 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xC67 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 AND SWAP1 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x4000AEA0 PUSH32 0x0 DUP6 DUP8 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xDEA JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xDD2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xE17 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE4C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xE62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0xE82 SWAP1 DUP7 SWAP1 DUP6 SWAP1 ADDRESS SWAP1 PUSH2 0x13D4 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0xEA5 SWAP1 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x1428 AND JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0xEBE DUP6 DUP3 PUSH2 0x14A3 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEEB PUSH1 0x1 PUSH2 0xEDF DUP5 PUSH1 0x14 PUSH4 0xFFFFFFFF PUSH2 0x14CF AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1428 AND JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0x6 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP4 SWAP1 SSTORE MLOAD SWAP2 SWAP3 POP DUP3 SWAP2 DUP6 SWAP2 PUSH32 0x909DD726737B7FFA4AE9D137E9EDEBE8A74A9C2910A4B60E8112F93AB2170837 SWAP2 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF5A PUSH2 0x15C5 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x2C0 DUP2 ADD DUP3 MSTORE PUSH1 0x9 PUSH2 0x280 DUP3 ADD DUP2 DUP2 MSTORE PUSH32 0x54617267617279656E0000000000000000000000000000000000000000000000 PUSH2 0x2A0 DUP5 ADD MSTORE DUP3 MSTORE DUP3 MLOAD DUP1 DUP5 ADD DUP5 MSTORE DUP2 DUP2 MSTORE PUSH32 0x4C616E6E69737465720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP6 ADD DUP6 MSTORE PUSH1 0x5 DUP1 DUP3 MSTORE PUSH32 0x537461726B000000000000000000000000000000000000000000000000000000 DUP3 DUP5 ADD MSTORE DUP5 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 MLOAD DUP1 DUP7 ADD DUP7 MSTORE PUSH1 0x6 DUP1 DUP3 MSTORE PUSH32 0x547972656C6C0000000000000000000000000000000000000000000000000000 DUP3 DUP6 ADD MSTORE PUSH1 0x60 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE SWAP4 DUP5 MSTORE PUSH32 0x426172617468656F6E0000000000000000000000000000000000000000000000 DUP5 DUP5 ADD MSTORE PUSH1 0x80 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP5 MLOAD DUP1 DUP7 ADD DUP7 MSTORE PUSH1 0x7 DUP1 DUP3 MSTORE PUSH32 0x4D617274656C6C00000000000000000000000000000000000000000000000000 DUP3 DUP6 ADD MSTORE PUSH1 0xA0 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE DUP3 DUP2 MSTORE PUSH32 0x54756C6C79000000000000000000000000000000000000000000000000000000 DUP2 DUP6 ADD MSTORE PUSH1 0xC0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE DUP5 DUP2 MSTORE PUSH32 0x426F6C746F6E0000000000000000000000000000000000000000000000000000 DUP2 DUP6 ADD MSTORE PUSH1 0xE0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE DUP2 DUP2 MSTORE PUSH32 0x477265796A6F7900000000000000000000000000000000000000000000000000 DUP2 DUP6 ADD MSTORE PUSH2 0x100 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE DUP3 DUP2 MSTORE PUSH32 0x417272796E000000000000000000000000000000000000000000000000000000 DUP2 DUP6 ADD MSTORE PUSH2 0x120 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0x4672657900000000000000000000000000000000000000000000000000000000 DUP2 DUP6 ADD MSTORE PUSH2 0x140 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE DUP2 DUP2 MSTORE PUSH32 0x4D6F726D6F6E7400000000000000000000000000000000000000000000000000 DUP2 DUP6 ADD MSTORE PUSH2 0x160 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE DUP5 DUP2 MSTORE PUSH32 0x5461726C65790000000000000000000000000000000000000000000000000000 DUP2 DUP6 ADD MSTORE PUSH2 0x180 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE DUP3 DUP2 MSTORE PUSH32 0x4461796E65000000000000000000000000000000000000000000000000000000 DUP2 DUP6 ADD MSTORE PUSH2 0x1A0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE SWAP2 DUP3 MSTORE PUSH32 0x556D626572000000000000000000000000000000000000000000000000000000 DUP3 DUP5 ADD MSTORE PUSH2 0x1C0 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 MLOAD DUP1 DUP7 ADD DUP7 MSTORE PUSH1 0x8 DUP1 DUP3 MSTORE PUSH32 0x56616C6572796F6E000000000000000000000000000000000000000000000000 DUP3 DUP6 ADD MSTORE PUSH2 0x1E0 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE DUP2 DUP2 MSTORE PUSH32 0x4D616E6465726C79000000000000000000000000000000000000000000000000 DUP2 DUP6 ADD MSTORE PUSH2 0x200 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE SWAP2 DUP3 MSTORE PUSH32 0x436C6567616E6500000000000000000000000000000000000000000000000000 DUP3 DUP5 ADD MSTORE PUSH2 0x220 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 MLOAD DUP1 DUP7 ADD DUP7 MSTORE SWAP3 DUP4 MSTORE PUSH32 0x476C6F7665720000000000000000000000000000000000000000000000000000 DUP4 DUP4 ADD MSTORE PUSH2 0x240 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE SWAP1 DUP4 MSTORE PUSH32 0x4B6172737461726B000000000000000000000000000000000000000000000000 SWAP1 DUP4 ADD MSTORE PUSH2 0x260 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 PUSH2 0x13BE DUP5 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x154E AND JUMP JUMPDEST PUSH1 0x14 DUP2 LT PUSH2 0x13C8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD SWAP7 SWAP1 SWAP7 MSTORE DUP1 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xA0 SWAP1 SWAP3 ADD SWAP1 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x149C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP1 MLOAD DUP1 DUP4 SUB DUP3 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP3 ADD SWAP1 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x153D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206D6F64756C6F206279207A65726F0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x1546 JUMPI INVALID JUMPDEST MOD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x15BF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x280 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x14 SWAP1 JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x15D5 JUMPI SWAP1 POP POP SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB5 0xEC DELEGATECALL SLOAD 0xCB 0x25 0xD6 PUSH25 0xB51DF1F9F74D18B4F13D55CDFC78E913B1776C4F2B2966864 PUSH20 0x6F6C634300060600330000000000000000000000 ",
				"sourceMap": "310:5735:26:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;310:5735:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;9;2:12;2096:462:26;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;2096:462:26;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;4865:82;;;:::i;5062:74::-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;5062:74:26;;:::i;:::-;;806:254:13;;;:::i;179:20::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;9268:207:22;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;9268:207:22;;;;;;;:::i;4442:135:26:-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;4442:135:26;;;;;;;;;:::i;4683:90::-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;4683:90:26;;:::i;3775:258::-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;3775:258:26;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;3775:258:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5223:74;;;:::i;567:150:13:-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;567:150:13;;;;:::i;2096:462:26:-;1194:5:13;;2182:17:26;;1194:5:13;;1180:10;:19;1172:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2252:5:26::1;;2219:4;:14;;;2242:4;2219:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24::::0;17:12:::1;2:2;2219:29:26;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;2219:29:26;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28::::0;21:12:::1;4:2;-1:-1:::0;2219:29:26;:38:::1;;2211:77;;;::::0;;::::1;::::0;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;2306:17;::::0;::::1;;::::0;;;:9:::1;:17;::::0;;;;;:22;2298:49:::1;;;::::0;;::::1;::::0;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;2369:53;2387:9;;2398:5;;2405:16;2369:17;:53::i;:::-;2432:20;::::0;;;:9:::1;:20;::::0;;;;;;;:29;;;::::1;;::::0;::::1;::::0;;::::1;::::0;;;2471:17;;;:9:::1;:17:::0;;;;;;444:2:::1;2471:36:::0;;2522:29;2432:20;;-1:-1:-1;2432:29:26;:20;;2522:29:::1;::::0;::::1;2096:462:::0;;;;:::o;4865:82::-;4931:9;;4865:82;:::o;5062:74::-;1194:5:13;;;;1180:10;:19;1172:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5118:5:26::1;:11:::0;5062:74::o;806:254:13:-;876:12;;;;862:10;:26;854:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;941:5;;;952:18;;;;960:10;952:18;;;;;;976:12;:25;;;;;;;1013:42;;941:5;;;;;960:10;941:5;;1013:42;;922:16;;1013:42;806:254;:::o;179:20::-;;;;;;:::o;9268:207:22:-;9360:10;:28;9374:14;9360:28;;9352:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9430:40;9448:9;9459:10;9430:17;:40::i;:::-;9268:207;;:::o;4442:135:26:-;1194:5:13;;;;1180:10;:19;1172:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4526:4:26::1;:13;;;4540:2;4544:5;4526:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24::::0;17:12:::1;2:2;4526:24:26;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;4526:24:26;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28::::0;21:12:::1;4:2;-1:-1:::0;4526:24:26;4518:52:::1;;;::::0;;::::1;::::0;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;4683:90:::0;1194:5:13;;;;1180:10;:19;1172:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4747:9:26::1;:19:::0;4683:90::o;3775:258::-;3860:17;;;;;;;:9;:17;;;;;;3827:13;;3852:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3920:17;;;;;;;:9;:17;;;;;;444:2;3920:37;;3912:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4008:17;;;;;;;:9;:17;;;;;;3995:31;;:12;:31::i;:::-;3988:38;3775:258;-1:-1:-1;;3775:258:26:o;5223:74::-;5285:5;;5223:74;:::o;567:150:13:-;1194:5;;;;1180:10;:19;1172:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;644:12:::1;:18:::0;;;::::1;;::::0;;::::1;::::0;;::::1;::::0;;;-1:-1:-1;701:5:13;674:38:::1;::::0;644:18;;701:5:::1;::::0;674:38:::1;::::0;-1:-1:-1;;674:38:13::1;567:150:::0;:::o;7428:1013:22:-;7524:17;7551:4;:20;;;7572:14;7588:4;7605:8;7615:5;7594:27;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;7594:27:22;;;7551:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;7551:71:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;7551:71:22;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7551:71:22;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;7853:15:22;7921:16;;;7551:71;7921:16;;;;;;;7872:66;;7889:8;;7899:5;;7914:4;;7872:16;:66::i;:::-;8368:6;:16;;;;;;;;;;;7853:85;;-1:-1:-1;8368:23:22;;8389:1;8368:23;:20;:23;:::i;:::-;8349:6;:16;;;;;;;;;;:42;8404:32;8356:8;8428:7;8404:13;:32::i;:::-;8397:39;7428:1013;-1:-1:-1;;;;;7428:1013:22:o;3368:243:26:-;3462:16;3481:25;3504:1;3481:18;:10;3496:2;3481:18;:14;:18;:::i;:::-;:22;:25;:22;:25;:::i;:::-;3516:31;3526:20;;;:9;:20;;;;;;;;;;;3516:31;;:9;:31;;;;;;:42;;;3573:31;3462:44;;-1:-1:-1;3462:44:26;;3536:9;;3573:31;;;3368:243;;;:::o;5424:619::-;5480:13;5505:28;;:::i;:::-;-1:-1:-1;5505:493:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5505:493:26;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5505:493:26;;;;;6026:9;:2;6033:1;6026:9;:6;:9;:::i;:::-;6015:21;;;;;;;;;;;;5424:619;-1:-1:-1;;;5424:619:26:o;797:231:24:-;970:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;970:51:24;;;;;;960:62;;;;;;797:231::o;863:162:66:-;921:7;948:5;;;967:6;;;;959:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1019:1;863:162;-1:-1:-1;;;863:162:66:o;1408:171:24:-;1532:41;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;1532:41:24;;;;;;1522:52;;;;;;1408:171::o;3263:139:66:-;3321:7;3344:6;3336:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3396:1;3392;:5;;;;;;;3263:139;-1:-1:-1;;;3263:139:66:o;1277:165::-;1335:7;1363:1;1358;:6;;1350:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1417:5:66;;;1277:165::o;310:5735:26:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o"
			},
			"methodIdentifiers": {
				"acceptOwnership()": "79ba5097",
				"fee()": "ddca3f43",
				"house(address)": "b1cad5e3",
				"keyHash()": "61728f39",
				"owner()": "8da5cb5b",
				"rawFulfillRandomness(bytes32,uint256)": "94985ddd",
				"rollDice(uint256,address)": "5e816740",
				"setFee(uint256)": "69fe0e2d",
				"setKeyHash(bytes32)": "98544710",
				"transferOwnership(address)": "f2fde38b",
				"withdrawLINK(address,uint256)": "983fbab2"
			}
		},
		"metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"link\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"DiceLanded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"roller\",\"type\":\"address\"}],\"name\":\"DiceRolled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"house\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userProvidedSeed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"roller\",\"type\":\"address\"}],\"name\":\"rollDice\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"setKeyHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawLINK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is only an example implementation and not necessarily suitable for mainnet.\",\"methods\":{\"acceptOwnership()\":{\"details\":\"Allows an ownership transfer to be completed by the recipient.\"},\"constructor\":{\"details\":\"NETWORK: KOVANChainlink VRF Coordinator address: 0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9LINK token address:                0xa36085F69e2889c224210F603D836748e7dC0088Key Hash:   0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4Fee:        0.1 LINK (100000000000000000)\",\"params\":{\"fee\":\"uint256 fee to pay the VRF oracle\",\"keyHash\":\"bytes32 representing the hash of the VRF job\",\"link\":\"address of the LINK token\",\"vrfCoordinator\":\"address of the VRF Coordinator\"}},\"house(address)\":{\"params\":{\"player\":\"address\"},\"returns\":{\"_0\":\"house as a string\"}},\"rollDice(uint256,address)\":{\"details\":\"Warning: if the VRF response is delayed, avoid calling requestRandomness repeatedly as that would give miners/VRF operators latitude about which VRF response arrives first.You must review your implementation details with extreme care.\",\"params\":{\"roller\":\"address of the roller\",\"userProvidedSeed\":\"uint256 unpredictable seed\"}},\"setFee(uint256)\":{\"params\":{\"fee\":\"uint256\"}},\"setKeyHash(bytes32)\":{\"params\":{\"keyHash\":\"bytes32\"}},\"transferOwnership(address)\":{\"details\":\"Allows an owner to begin transferring ownership to a new address, pending.\"},\"withdrawLINK(address,uint256)\":{\"details\":\"this is an example only, and in a real contract withdrawals should happen according to the established withdrawal pattern:  https://docs.soliditylang.org/en/v0.4.24/common-patterns.html#withdrawal-from-contracts\",\"params\":{\"to\":\"the address to withdraw LINK to\",\"value\":\"the amount of LINK to withdraw\"}}}},\"userdoc\":{\"methods\":{\"constructor\":\"Constructor inherits VRFConsumerBase\",\"fee()\":{\"notice\":\"Get the current fee\"},\"house(address)\":{\"notice\":\"Get the house assigned to the player once the address has rolled\"},\"keyHash()\":{\"notice\":\"Get the current key hash\"},\"rollDice(uint256,address)\":{\"notice\":\"Requests randomness from a user-provided seed\"},\"setFee(uint256)\":{\"notice\":\"Set the oracle fee for requesting randomness\"},\"setKeyHash(bytes32)\":{\"notice\":\"Set the key hash for the oracle\"},\"withdrawLINK(address,uint256)\":{\"notice\":\"Withdraw LINK from this contract.\"}},\"notice\":\"A Chainlink VRF consumer which uses randomness to mimic the rolling of a 20 sided die\"}},\"settings\":{\"compilationTarget\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/examples/VRFD20.sol\":\"VRFD20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/Owned.sol\":{\"keccak256\":\"0xd791ecc6095e7f3b0a49f036f1fd9011873e5c7c04d2b28292d11e15c0967b75\",\"urls\":[\"bzz-raw://1cc68291e0dc79fb6a140a2f4e667392fe71d0e7814bad3b56ae47dd13f69ba7\",\"dweb:/ipfs/QmQFTFFBjaJsb7sivr25R4XfNKW84nDjZWSGMY7Cc8eqqC\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/VRFConsumerBase.sol\":{\"keccak256\":\"0xbb84a6411e071d5b04b36d7dda59eaf1cb5a28b3b289757a5ac849ddf9befac3\",\"urls\":[\"bzz-raw://6bc702d1ec269920a3f0cf371155b6c4800d36233949873144e95ce3c4427eb3\",\"dweb:/ipfs/QmUrYPpfh7TAcUBx3B5ugW2jCAeWThMssY5oyRgQXQRkbE\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/VRFRequestIDBase.sol\":{\"keccak256\":\"0x0c3bd40c63dac8398a979b1228c8ecb1c269c157dd16f2dce2086d2270b65b22\",\"urls\":[\"bzz-raw://ed9db87be9dfb0f763a556d8d80356b08282b8ea48484838cdf470a5c3cd15d5\",\"dweb:/ipfs/QmPLhwDAS3TPDiEQmTyqXnWBqwEMBSbXtjEiQDSGejoiPt\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/examples/VRFD20.sol\":{\"keccak256\":\"0xc6d139241d49a5458462d135efa670c707eac760b12722e370666e6748b793d6\",\"urls\":[\"bzz-raw://3d98a5df8e5076ce53baf6346862fd8f49fdfda59c16781920c292c44c607cfa\",\"dweb:/ipfs/QmeEDF9cMe2X5Gomis82Uczo2F1obLR9WuamSca4ecdbDY\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/interfaces/LinkTokenInterface.sol\":{\"keccak256\":\"0xe245a7be950c94d87bb775ae9ee9fbd693fbe2987778e6ce0b04605ea44b7b68\",\"urls\":[\"bzz-raw://bd2c3165d949fc66fe407b96eb3dc2092c7e800f4c073b411bf7b96de3e156c9\",\"dweb:/ipfs/QmcfJhR1Np4GsLWnww2Duqks2wEzYk8VDTvCAYy7MisG1r\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/vendor/SafeMathChainlink.sol\":{\"keccak256\":\"0x105f5e9491f3d0bbdd4f1c7627eb839d69b944bfd803028a01cc083597692c1f\",\"urls\":[\"bzz-raw://ec45a2748a024a947a921183d4102d5e206808588501d85ddc4f5668a009bc73\",\"dweb:/ipfs/QmRNAMpq7LdWFnJ7wWKGbUuAcURaGSS42PMxtQ4vjrHmp9\"]}},\"version\":1}",
		"userdoc": {
			"methods": {
				"constructor": "Constructor inherits VRFConsumerBase",
				"fee()": {
					"notice": "Get the current fee"
				},
				"house(address)": {
					"notice": "Get the house assigned to the player once the address has rolled"
				},
				"keyHash()": {
					"notice": "Get the current key hash"
				},
				"rollDice(uint256,address)": {
					"notice": "Requests randomness from a user-provided seed"
				},
				"setFee(uint256)": {
					"notice": "Set the oracle fee for requesting randomness"
				},
				"setKeyHash(bytes32)": {
					"notice": "Set the key hash for the oracle"
				},
				"withdrawLINK(address,uint256)": {
					"notice": "Withdraw LINK from this contract."
				}
			},
			"notice": "A Chainlink VRF consumer which uses randomness to mimic the rolling of a 20 sided die"
		}
	},
	"sources": {
		"examples/VRFD20.sol": {
			"id": 26
		},
		"VRFConsumerBase.sol": {
			"id": 22
		},
		"vendor/SafeMathChainlink.sol": {
			"id": 66
		},
		"interfaces/LinkTokenInterface.sol": {
			"id": 36
		},
		"VRFRequestIDBase.sol": {
			"id": 24
		},
		"Owned.sol": {
			"id": 13
		}
	},
	"sourceCodes": {
		"examples/VRFD20.sol": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.6;\n\nimport \"../VRFConsumerBase.sol\";\nimport \"../Owned.sol\";\n\n/**\n * @notice A Chainlink VRF consumer which uses randomness to mimic the rolling\n * of a 20 sided die\n * @dev This is only an example implementation and not necessarily suitable for mainnet.\n */\ncontract VRFD20 is VRFConsumerBase, Owned {\n    using SafeMathChainlink for uint256;\n\n    uint256 private constant ROLL_IN_PROGRESS = 42;\n\n    bytes32 private s_keyHash;\n    uint256 private s_fee;\n    mapping(bytes32 => address) private s_rollers;\n    mapping(address => uint256) private s_results;\n\n    event DiceRolled(bytes32 indexed requestId, address indexed roller);\n    event DiceLanded(bytes32 indexed requestId, uint256 indexed result);\n\n    /**\n     * @notice Constructor inherits VRFConsumerBase\n     *\n     * @dev NETWORK: KOVAN\n     * @dev   Chainlink VRF Coordinator address: 0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9\n     * @dev   LINK token address:                0xa36085F69e2889c224210F603D836748e7dC0088\n     * @dev   Key Hash:   0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4\n     * @dev   Fee:        0.1 LINK (100000000000000000)\n     *\n     * @param vrfCoordinator address of the VRF Coordinator\n     * @param link address of the LINK token\n     * @param keyHash bytes32 representing the hash of the VRF job\n     * @param fee uint256 fee to pay the VRF oracle\n     */\n    constructor(address vrfCoordinator, address link, bytes32 keyHash, uint256 fee)\n        public\n        VRFConsumerBase(vrfCoordinator, link)\n    {\n        s_keyHash = keyHash;\n        s_fee = fee;\n        \n    }\n\n    /**\n     * @notice Requests randomness from a user-provided seed\n     * @dev Warning: if the VRF response is delayed, avoid calling requestRandomness repeatedly\n     * as that would give miners/VRF operators latitude about which VRF response arrives first.\n     * @dev You must review your implementation details with extreme care.\n     *\n     * @param userProvidedSeed uint256 unpredictable seed\n     * @param roller address of the roller\n     */\n    function rollDice(uint256 userProvidedSeed, address roller) public onlyOwner returns (bytes32 requestId) {\n        require(LINK.balanceOf(address(this)) >= s_fee, \"Not enough LINK to pay fee\");\n        require(s_results[roller] == 0, \"Already rolled\");\n        requestId = requestRandomness(s_keyHash, s_fee, userProvidedSeed);\n        s_rollers[requestId] = roller;\n        s_results[roller] = ROLL_IN_PROGRESS;\n        emit DiceRolled(requestId, roller);\n    }\n\n    /**\n     * @notice Callback function used by VRF Coordinator to return the random number\n     * to this contract.\n     * @dev Some action on the contract state should be taken here, like storing the result.\n     * @dev WARNING: take care to avoid having multiple VRF requests in flight if their order of arrival would result\n     * in contract states with different outcomes. Otherwise miners or the VRF operator would could take advantage\n     * by controlling the order.\n     * @dev The VRF Coordinator will only send this function verified responses, and the parent VRFConsumerBase\n     * contract ensures that this method only receives randomness from the designated VRFCoordinator.\n     *\n     * @param requestId bytes32\n     * @param randomness The random result returned by the oracle\n     */\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\n        uint256 d20Value = randomness.mod(20).add(1);\n        s_results[s_rollers[requestId]] = d20Value;\n        emit DiceLanded(requestId, d20Value);\n    }\n\n    /**\n     * @notice Get the house assigned to the player once the address has rolled\n     * @param player address\n     * @return house as a string\n     */\n    function house(address player) public view returns (string memory) {\n        require(s_results[player] != 0, \"Dice not rolled\");\n        require(s_results[player] != ROLL_IN_PROGRESS, \"Roll in progress\");\n        return getHouseName(s_results[player]);\n    }\n\n    /**\n     * @notice Withdraw LINK from this contract.\n     * @dev this is an example only, and in a real contract withdrawals should\n     * happen according to the established withdrawal pattern: \n     * https://docs.soliditylang.org/en/v0.4.24/common-patterns.html#withdrawal-from-contracts\n     * @param to the address to withdraw LINK to\n     * @param value the amount of LINK to withdraw\n     */\n    function withdrawLINK(address to, uint256 value) public onlyOwner {\n        require(LINK.transfer(to, value), \"Not enough LINK\");\n    }\n\n    /**\n     * @notice Set the key hash for the oracle\n     *\n     * @param keyHash bytes32\n     */\n    function setKeyHash(bytes32 keyHash) public onlyOwner {\n        s_keyHash = keyHash;\n    }\n\n    /**\n     * @notice Get the current key hash\n     *\n     * @return bytes32\n     */\n    function keyHash() public view returns (bytes32) {\n        return s_keyHash;\n    }\n\n    /**\n     * @notice Set the oracle fee for requesting randomness\n     *\n     * @param fee uint256\n     */\n    function setFee(uint256 fee) public onlyOwner {\n        s_fee = fee;\n    }\n\n    /**\n     * @notice Get the current fee\n     *\n     * @return uint256\n     */\n    function fee() public view returns (uint256) {\n        return s_fee;\n    }\n\n    /**\n     * @notice Get the house namne from the id\n     * @param id uint256\n     * @return house name string\n     */\n    function getHouseName(uint256 id) private pure returns (string memory) {\n        string[20] memory houseNames = [\n            \"Targaryen\",\n            \"Lannister\",\n            \"Stark\",\n            \"Tyrell\",\n            \"Baratheon\",\n            \"Martell\",\n            \"Tully\",\n            \"Bolton\",\n            \"Greyjoy\",\n            \"Arryn\",\n            \"Frey\",\n            \"Mormont\",\n            \"Tarley\",\n            \"Dayne\",\n            \"Umber\",\n            \"Valeryon\",\n            \"Manderly\",\n            \"Clegane\",\n            \"Glover\",\n            \"Karstark\"\n        ];\n        return houseNames[id.sub(1)];\n    }\n}\n",
		"VRFConsumerBase.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"./vendor/SafeMathChainlink.sol\";\n\nimport \"./interfaces/LinkTokenInterface.sol\";\n\nimport \"./VRFRequestIDBase.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n * @dev want to generate randomness from.\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomness method.\n *\n * @dev The randomness argument to fulfillRandomness is the actual random value\n * @dev generated from your seed.\n *\n * @dev The requestId argument is generated from the keyHash and the seed by\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n * @dev requests open, you can use the requestId to track which seed is\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.)\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ. (Which is critical to making unpredictable randomness! See the\n * @dev next section.)\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\n * @dev block in which the request is made, user-provided seeds have no impact\n * @dev on its economic security properties. They are only included for API\n * @dev compatability with previous versions of this contract.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request.\n */\nabstract contract VRFConsumerBase is VRFRequestIDBase {\n\n  using SafeMathChainlink for uint256;\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomness the VRF output\n   */\n  function fulfillRandomness(bytes32 requestId, uint256 randomness)\n    internal virtual;\n\n  /**\n   * @notice requestRandomness initiates a request for VRF output given _seed\n   *\n   * @dev The fulfillRandomness method receives the output, once it's provided\n   * @dev by the Oracle, and verified by the vrfCoordinator.\n   *\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\n   * @dev the _fee must exceed the fee specified during registration of the\n   * @dev _keyHash.\n   *\n   * @dev The _seed parameter is vestigial, and is kept only for API\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\n   * @dev your own randomness, here, but it's not necessary because the VRF\n   * @dev oracle will mix the hash of the block containing your request into the\n   * @dev VRF seed it ultimately uses.\n   *\n   * @param _keyHash ID of public key against which randomness is generated\n   * @param _fee The amount of LINK to send with the request\n   * @param _seed seed mixed into the input of the VRF.\n   *\n   * @return requestId unique ID for this request\n   *\n   * @dev The returned requestId can be used to distinguish responses to\n   * @dev concurrent requests. It is passed as the first argument to\n   * @dev fulfillRandomness.\n   */\n  function requestRandomness(bytes32 _keyHash, uint256 _fee, uint256 _seed)\n    internal returns (bytes32 requestId)\n  {\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\n    // the hash of the block containing this request to obtain the seed/input\n    // which is finally passed to the VRF cryptographic machinery.\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, _seed, address(this), nonces[_keyHash]);\n    // nonces[_keyHash] must stay in sync with\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\n    // This provides protection against the user repeating their input seed,\n    // which would result in a predictable/duplicate output, if multiple such\n    // requests appeared in the same block.\n    nonces[_keyHash] = nonces[_keyHash].add(1);\n    return makeRequestId(_keyHash, vRFSeed);\n  }\n\n  LinkTokenInterface immutable internal LINK;\n  address immutable private vrfCoordinator;\n\n  // Nonces for each VRF key from which randomness has been requested.\n  //\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   * @param _link address of LINK token contract\n   *\n   * @dev https://docs.chain.link/docs/link-token-contracts\n   */\n  constructor(address _vrfCoordinator, address _link) public {\n    vrfCoordinator = _vrfCoordinator;\n    LINK = LinkTokenInterface(_link);\n  }\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\n    fulfillRandomness(requestId, randomness);\n  }\n}\n",
		"vendor/SafeMathChainlink.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathChainlink {\n  /**\n    * @dev Returns the addition of two unsigned integers, reverting on\n    * overflow.\n    *\n    * Counterpart to Solidity's `+` operator.\n    *\n    * Requirements:\n    * - Addition cannot overflow.\n    */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a, \"SafeMath: addition overflow\");\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the subtraction of two unsigned integers, reverting on\n    * overflow (when the result is negative).\n    *\n    * Counterpart to Solidity's `-` operator.\n    *\n    * Requirements:\n    * - Subtraction cannot overflow.\n    */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a, \"SafeMath: subtraction overflow\");\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the multiplication of two unsigned integers, reverting on\n    * overflow.\n    *\n    * Counterpart to Solidity's `*` operator.\n    *\n    * Requirements:\n    * - Multiplication cannot overflow.\n    */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, \"SafeMath: multiplication overflow\");\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the integer division of two unsigned integers. Reverts on\n    * division by zero. The result is rounded towards zero.\n    *\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\n    * uses an invalid opcode to revert (consuming all remaining gas).\n    *\n    * Requirements:\n    * - The divisor cannot be zero.\n    */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n    require(b > 0, \"SafeMath: division by zero\");\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n    * Reverts when dividing by zero.\n    *\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\n    * invalid opcode to revert (consuming all remaining gas).\n    *\n    * Requirements:\n    * - The divisor cannot be zero.\n    */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0, \"SafeMath: modulo by zero\");\n    return a % b;\n  }\n}\n",
		"interfaces/LinkTokenInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n  function approve(address spender, uint256 value) external returns (bool success);\n  function balanceOf(address owner) external view returns (uint256 balance);\n  function decimals() external view returns (uint8 decimalPlaces);\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n  function name() external view returns (string memory tokenName);\n  function symbol() external view returns (string memory tokenSymbol);\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n  function transfer(address to, uint256 value) external returns (bool success);\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\n}\n",
		"VRFRequestIDBase.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ncontract VRFRequestIDBase {\n\n  /**\n   * @notice returns the seed which is actually input to the VRF coordinator\n   *\n   * @dev To prevent repetition of VRF output due to repetition of the\n   * @dev user-supplied seed, that seed is combined in a hash with the\n   * @dev user-specific nonce, and the address of the consuming contract. The\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n   * @dev the final seed, but the nonce does protect against repetition in\n   * @dev requests which are included in a single block.\n   *\n   * @param _userSeed VRF seed input provided by user\n   * @param _requester Address of the requesting contract\n   * @param _nonce User-specific nonce at the time of the request\n   */\n  function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,\n    address _requester, uint256 _nonce)\n    internal pure returns (uint256)\n  {\n    return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n  }\n\n  /**\n   * @notice Returns the id for this request\n   * @param _keyHash The serviceAgreement ID to be used for this request\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\n   * @return The id for this request\n   *\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n   * @dev contract, but the one generated by makeVRFInputSeed\n   */\n  function makeRequestId(\n    bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\n  }\n}\n",
		"Owned.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\n/**\n * @title The Owned contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract Owned {\n\n  address public owner;\n  address private pendingOwner;\n\n  event OwnershipTransferRequested(\n    address indexed from,\n    address indexed to\n  );\n  event OwnershipTransferred(\n    address indexed from,\n    address indexed to\n  );\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Allows an owner to begin transferring ownership to a new address,\n   * pending.\n   */\n  function transferOwnership(address _to)\n    external\n    onlyOwner()\n  {\n    pendingOwner = _to;\n\n    emit OwnershipTransferRequested(owner, _to);\n  }\n\n  /**\n   * @dev Allows an ownership transfer to be completed by the recipient.\n   */\n  function acceptOwnership()\n    external\n  {\n    require(msg.sender == pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = owner;\n    owner = msg.sender;\n    pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /**\n   * @dev Reverts if called by anyone other than the contract owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner, \"Only callable by owner\");\n    _;\n  }\n\n}\n"
	},
	"sourceTreeHashHex": "0x89c597bdcda2ce72ce5cef1ad442bf2fc4f5391addab74d8d31cc9c24aff9ba7",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.6.6+commit.6c089d02.js",
		"settings": {
			"optimizer": {
				"runs": 1000000,
				"enabled": true
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"userdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap",
						"evm.methodIdentifiers",
						"metadata"
					]
				}
			},
			"remappings": []
		}
	},
	"chains": {}
}
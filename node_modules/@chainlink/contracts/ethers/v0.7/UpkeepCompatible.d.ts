/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface UpkeepCompatibleInterface extends Interface {
  functions: {
    checkForUpkeep: TypedFunctionDescription<{
      encode([data]: [Arrayish]): string;
    }>;

    performUpkeep: TypedFunctionDescription<{
      encode([data]: [Arrayish]): string;
    }>;
  };

  events: {};
}

export class UpkeepCompatible extends Contract {
  connect(signerOrProvider: Signer | Provider | string): UpkeepCompatible;
  attach(addressOrName: string): UpkeepCompatible;
  deployed(): Promise<UpkeepCompatible>;

  on(event: EventFilter | string, listener: Listener): UpkeepCompatible;
  once(event: EventFilter | string, listener: Listener): UpkeepCompatible;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): UpkeepCompatible;
  removeAllListeners(eventName: EventFilter | string): UpkeepCompatible;
  removeListener(eventName: any, listener: Listener): UpkeepCompatible;

  interface: UpkeepCompatibleInterface;

  functions: {
    checkForUpkeep(
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "checkForUpkeep(bytes)"(
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    performUpkeep(
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "performUpkeep(bytes)"(
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  checkForUpkeep(
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "checkForUpkeep(bytes)"(
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  performUpkeep(
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "performUpkeep(bytes)"(
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    checkForUpkeep(
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "checkForUpkeep(bytes)"(
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    performUpkeep(
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "performUpkeep(bytes)"(
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface OperatorInterfaceInterface extends Interface {
  functions: {
    distributeFunds: TypedFunctionDescription<{
      encode([receivers, amounts]: [string[], BigNumberish[]]): string;
    }>;

    fulfillOracleRequest: TypedFunctionDescription<{
      encode([
        requestId,
        payment,
        callbackAddress,
        callbackFunctionId,
        expiration,
        data,
      ]: [
        Arrayish,
        BigNumberish,
        string,
        Arrayish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    fulfillOracleRequest2: TypedFunctionDescription<{
      encode([
        requestId,
        payment,
        callbackAddress,
        callbackFunctionId,
        expiration,
        data,
      ]: [
        Arrayish,
        BigNumberish,
        string,
        Arrayish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    isAuthorizedSender: TypedFunctionDescription<{
      encode([node]: [string]): string;
    }>;

    operatorTransferAndCall: TypedFunctionDescription<{
      encode([to, value, data]: [string, BigNumberish, Arrayish]): string;
    }>;

    setAuthorizedSender: TypedFunctionDescription<{
      encode([node, allowed]: [string, boolean]): string;
    }>;

    withdraw: TypedFunctionDescription<{
      encode([recipient, amount]: [string, BigNumberish]): string;
    }>;

    withdrawable: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {};
}

export class OperatorInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): OperatorInterface;
  attach(addressOrName: string): OperatorInterface;
  deployed(): Promise<OperatorInterface>;

  on(event: EventFilter | string, listener: Listener): OperatorInterface;
  once(event: EventFilter | string, listener: Listener): OperatorInterface;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): OperatorInterface;
  removeAllListeners(eventName: EventFilter | string): OperatorInterface;
  removeListener(eventName: any, listener: Listener): OperatorInterface;

  interface: OperatorInterfaceInterface;

  functions: {
    distributeFunds(
      receivers: string[],
      amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "distributeFunds(address[],uint256[])"(
      receivers: string[],
      amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    fulfillOracleRequest(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      expiration: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)"(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      expiration: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    fulfillOracleRequest2(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      expiration: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "fulfillOracleRequest2(bytes32,uint256,address,bytes4,uint256,bytes)"(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      expiration: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    isAuthorizedSender(
      node: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "isAuthorizedSender(address)"(
      node: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    operatorTransferAndCall(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "operatorTransferAndCall(address,uint256,bytes)"(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setAuthorizedSender(
      node: string,
      allowed: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setAuthorizedSender(address,bool)"(
      node: string,
      allowed: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawable(overrides?: TransactionOverrides): Promise<BigNumber>;

    "withdrawable()"(overrides?: TransactionOverrides): Promise<BigNumber>;
  };

  distributeFunds(
    receivers: string[],
    amounts: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "distributeFunds(address[],uint256[])"(
    receivers: string[],
    amounts: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  fulfillOracleRequest(
    requestId: Arrayish,
    payment: BigNumberish,
    callbackAddress: string,
    callbackFunctionId: Arrayish,
    expiration: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)"(
    requestId: Arrayish,
    payment: BigNumberish,
    callbackAddress: string,
    callbackFunctionId: Arrayish,
    expiration: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  fulfillOracleRequest2(
    requestId: Arrayish,
    payment: BigNumberish,
    callbackAddress: string,
    callbackFunctionId: Arrayish,
    expiration: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "fulfillOracleRequest2(bytes32,uint256,address,bytes4,uint256,bytes)"(
    requestId: Arrayish,
    payment: BigNumberish,
    callbackAddress: string,
    callbackFunctionId: Arrayish,
    expiration: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  isAuthorizedSender(
    node: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "isAuthorizedSender(address)"(
    node: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  operatorTransferAndCall(
    to: string,
    value: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "operatorTransferAndCall(address,uint256,bytes)"(
    to: string,
    value: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setAuthorizedSender(
    node: string,
    allowed: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setAuthorizedSender(address,bool)"(
    node: string,
    allowed: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdraw(
    recipient: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdrawable(overrides?: TransactionOverrides): Promise<BigNumber>;

  "withdrawable()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  filters: {};

  estimate: {
    distributeFunds(
      receivers: string[],
      amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "distributeFunds(address[],uint256[])"(
      receivers: string[],
      amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    fulfillOracleRequest(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      expiration: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)"(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      expiration: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    fulfillOracleRequest2(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      expiration: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "fulfillOracleRequest2(bytes32,uint256,address,bytes4,uint256,bytes)"(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      expiration: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    isAuthorizedSender(
      node: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "isAuthorizedSender(address)"(
      node: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    operatorTransferAndCall(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "operatorTransferAndCall(address,uint256,bytes)"(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setAuthorizedSender(
      node: string,
      allowed: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setAuthorizedSender(address,bool)"(
      node: string,
      allowed: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    withdrawable(overrides?: TransactionOverrides): Promise<BigNumber>;

    "withdrawable()"(overrides?: TransactionOverrides): Promise<BigNumber>;
  };
}
